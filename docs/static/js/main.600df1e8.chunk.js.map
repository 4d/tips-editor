{"version":3,"sources":["store/interfaces.store.ts","store/actions.store.ts","store/constants.store.ts","store/reducer.store.ts","store/provider.store.tsx","components/dialogs/confirm.dialog.tsx","components/dumb/breadcrumb.dumb.tsx","components/code.component.tsx","components/dumb/button-group.dumb.tsx","components/dumb/md.dumb.tsx","components/dumb/md-preview.dumb.tsx","components/detail.component.tsx","components/file-upload.component.tsx","components/dialogs/confirm-remove.dialog.tsx","components/list.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EItemType","EActionType","setItems","payload","type","SET_ITEMS","removeItem","index","REMOVE_ITEM","saveItem","item","SAVE_ITEM","setCurrentItem","SET_CURRENT_ITEM","filterByKey","FILTER_BY_KEY","TIPS_STORAGE_KEY","TIPS_URL","initialState","filter","key","items","current","keys","appReducer","state","action","SET_KEYS","FILTER_BY_TYPE","sortBy","remove","length","map","i","Store","createContext","displayName","useStore","useContext","StoreProvider","children","useReducer","globalState","dispatch","useEffect","localStorage","setItem","JSON","stringify","fetch","then","res","json","setKeys","Provider","value","ConfirmDialog","show","onYes","title","yesLabel","noLabel","yesProps","noProps","onHide","isYes","Modal","Header","Title","Body","Footer","Button","appearance","onClick","Arrow","active","props","className","BreadcrumbComponent","path","style","split","useState","activeIndex","setActiveIndex","Breadcrumb","separator","slice","join","Item","renderItem","onMouseEnter","onMouseLeave","Code","showCode","setShowCode","showRefresh","setShowRefresh","isFetching","setIsFetching","getItem","parse","e","refresh","finally","ALL_TYPES","TEXT","VIDEO","color","target","href","rel","Icon","icon","spin","ButtonGroup","IconButton","body","padding","borderRadius","marginBottom","border","src","theme","ButtonGroupComponent","onChange","data","v","undefined","ev","change","MdComponent","options","overrides","a","component","MdWithPreviewComponent","isPreview","setIsPreview","Input","componentClass","placeholder","StringType","Schema","Types","Hr","width","margin","model","Model","isRequired","pattern","isOneOf","addRule","isURL","Detail","error","setError","setValue","formRef","useRef","KEYS","useMemo","close","Drawer","Form","ref","autoComplete","formValue","formError","onCheck","FormGroup","ControlLabel","FormControl","name","accepter","AutoComplete","RadioGroup","display","paddingRight","Radio","rows","check","err","Object","styles","height","FileUpload","file","setFile","Uploader","draggable","multiple","fileList","autoUpload","fileListVisible","files","blobFile","text","result","Alert","accept","RemoveModal","onConfirm","IconComponent","Whisper","preventOverflow","placement","trigger","speaker","top","left","Popover","video","provider","link","allow","allowFullScreen","ItemsList","setIndex","keysString","isRemove","List","hover","startsWith","keyExists","includes","FlexboxGrid","colspan","Tooltip","marginLeft","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAAYA,EA4CAC,E,uGC9BL,SAASC,EAASC,GACvB,MAAO,CACLC,KAAMH,EAAYI,UAClBF,WAIG,SAASG,EAAWC,GACzB,MAAO,CACLH,KAAMH,EAAYO,YAClBL,QAASI,GAIN,SAASE,EACdC,EACAH,GAEA,MAAO,CACLH,KAAMH,EAAYU,UAClBR,QAAS,CAAEO,OAAMH,UAWd,SAASK,EACdT,GAEA,MAAO,CACLC,KAAMH,EAAYY,iBAClBV,WAIG,SAASW,EAAYX,GAC1B,MAAO,CACLC,KAAMH,EAAYc,cAClBZ,Y,SDzDQH,K,YAAAA,E,eAAAA,M,cA4CAC,K,6BAAAA,E,0BAAAA,E,sBAAAA,E,oBAAAA,E,sBAAAA,E,8BAAAA,E,iCAAAA,M,KE1CL,IAAMe,EAAmB,WACnBC,EACX,4EAEWC,EAA0B,CACrCC,OAAQ,CACNC,IAAK,GACLhB,KAAM,KAERiB,MAAO,GACPC,SAAU,EACVC,KAAM,I,yBCPKC,EAA0C,WAGtC,IAFfC,EAEc,uDAFKP,EACnBQ,EACc,uCACd,OAAQA,EAAOtB,MACb,KAAKH,EAAY0B,SACf,OAAO,2BACFF,GADL,IAEEF,KAAMG,EAAOvB,UAEjB,KAAKF,EAAYc,cACf,OAAO,2BACFU,GADL,IAEEN,OAAO,2BACFM,EAAMN,QADL,IAEJC,IAAKM,EAAOvB,YAGlB,KAAKF,EAAY2B,eACf,OAAO,2BACFH,GADL,IAEEN,OAAO,2BACFM,EAAMN,QADL,IAEJf,KAAMsB,EAAOvB,YAGnB,KAAKF,EAAYI,UACf,OAAO,2BACFoB,GADL,IAEEJ,MAAOQ,iBAAOH,EAAOvB,QAAS,CAAC,UAEnC,KAAKF,EAAYO,YACf,OAAO,2BACFiB,GADL,IAEEJ,MAAOS,iBACLL,EAAMJ,OACN,SAACX,EAAMH,GAAP,OAAiBA,IAAUmB,EAAOvB,aAGxC,KAAKF,EAAYU,UACf,MAAwBe,EAAOvB,QAAvBI,EAAR,EAAQA,MAAOG,EAAf,EAAeA,KAEf,OAAIH,GAASkB,EAAMJ,MAAMU,OAChB,2BACFN,GADL,IAEEH,SAAU,EACVD,MAAM,GAAD,mBAAMI,EAAMJ,OAAZ,CAAmBX,MAIrB,2BACFe,GADL,IAEEH,SAAU,EACVD,MAAOI,EAAMJ,MAAMW,KAAI,SAACV,EAASW,GAAV,OACrB1B,IAAU0B,EAAIvB,EAAOY,OAI3B,KAAKrB,EAAYY,iBACf,OAAO,2BACFY,GADL,IAEEH,QAASI,EAAOvB,UAEpB,QACE,OAAOsB,I,OCzDPS,EAAQC,wBAA8C,CAC1DjB,EACA,eAGFgB,EAAME,YAAc,QAEb,IAAMC,EAAW,kBAAMC,qBAAWJ,IAE5BK,EAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClC,EAAgCC,qBAC9BjB,EACAN,GAFF,mBAAOwB,EAAP,KAAoBC,EAApB,KAkBA,OAbAC,qBAAU,WACRC,aAAaC,QACX9B,EACA+B,KAAKC,UAAUN,EAAYrB,UAE5B,CAACqB,EAAYrB,QAEhBuB,qBAAU,WACRK,MAAM,aACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC3B,GAAD,OAAUoB,EHAf,SAAiBpB,GACtB,MAAO,CACLnB,KAAMH,EAAY0B,SAClBxB,QAASoB,GGHkB8B,CAAQ9B,SAClC,IAGD,cAACW,EAAMoB,SAAP,CAAgBC,MAAO,CAACb,EAAaC,GAArC,SACGH,K,SCYQgB,EA1CX,SAAC,GASE,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,MAOI,IANJC,aAMI,MANI,UAMJ,EALJnB,EAKI,EALJA,SAKI,IAJJoB,gBAII,MAJO,MAIP,MAHJC,eAGI,MAHM,KAGN,MAFJC,gBAEI,MAFO,GAEP,MADJC,eACI,MADM,GACN,EACJ,SAASC,EAAOC,GACVP,GACFA,EAAMO,GAIV,OACE,eAACC,EAAA,EAAD,CAAOT,KAAMA,EAAMO,OAAQ,kBAAMA,GAAO,IAAxC,UACE,cAACE,EAAA,EAAMC,OAAP,UACE,cAACD,EAAA,EAAME,MAAP,UAAcT,MAEhB,cAACO,EAAA,EAAMG,KAAP,UAAa7B,IACb,eAAC0B,EAAA,EAAMI,OAAP,WACE,cAACC,EAAA,EAAD,yBACEC,WAAW,WACPV,GAFN,IAGEW,QAAS,kBAAMT,GAAO,IAHxB,SAKGJ,KAEH,cAACW,EAAA,EAAD,yBACEC,WAAW,UACPT,GAFN,IAGEU,QAAS,kBAAMT,GAAO,IAHxB,SAKGH,Y,kDCpCLa,EAAwB,SAAC,GAAoC,IAAlClC,EAAiC,EAAjCA,SAAUmC,EAAuB,EAAvBA,OAAWC,EAAY,iBAChE,OACE,6CAAKC,UAAS,kBAAaF,EAAS,SAAW,KAAUC,GAAzD,aACGpC,MAwDQsC,EA5C2C,SAAC,GAKpD,IAAD,IAJJC,YAII,MAJG,GAIH,EAHJN,EAGI,EAHJA,QAGI,IAFJI,iBAEI,MAFQ,GAER,MADJG,aACI,MADI,GACJ,EACE3D,EAAQ0D,EAAKE,MAAM,KACzB,EAAsCC,oBAAkB,GAAxD,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,OACE,cAACC,EAAA,EAAD,CACEC,UAAU,GACVN,MAAOA,EACPH,UAAS,UAAKA,EAAL,kCAHX,SAKGxD,EAAMW,KAAI,SAACtB,EAAMH,GAChB,IAAMe,EAAUD,EAAMkE,MAAM,EAAGhF,EAAQ,GAAGiF,KAAK,KAC/C,OACE,cAACH,EAAA,EAAWI,KAAZ,CAEEC,WAAY,kBACV,cAAC,EAAD,CACEC,aAAc,kBAAMP,EAAe7E,IACnCqF,aAAc,kBAAMR,GAAgB,IACpCT,OAAQQ,GAAe5E,EACvBkE,QAAS,WACHA,GACFA,EAAQ,CACNlB,MAAOjC,EACPf,WARR,SAaGG,MAfAY,SC0HFuE,EApJE,WACf,MAAsCxD,IAAtC,0BAAShB,EAAT,EAASA,MAAOF,EAAhB,EAAgBA,OAAUwB,EAA1B,KACA,EAAgCuC,oBAAkB,GAAlD,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAAsCb,oBAAkB,GAAxD,mBAAOc,EAAP,KAAoBC,EAApB,KACA,EAAoCf,oBAAkB,GAAtD,mBAAOgB,EAAP,KAAmBC,EAAnB,KAEAvD,qBAAU,WACR,IACIvB,EAAiB,GAErB,GAHcwB,aAAauD,QAAQpF,GAGnC,CACE,IACEK,EAAQ0B,KAAKsD,MACXxD,aAAauD,QAAQpF,IAAqB,MAE5C,MAAOsF,GACPjF,EAAQ,GAGVsB,EAASzC,EAASmB,SAIpBkF,MACC,IAEH,IAAMA,EAAU,WACdJ,GAAc,GACdlD,MAAMhC,GACHiC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GAAD,OAAUT,EAASzC,EAASkD,OACjCoD,SAAQ,kBAAML,GAAc,OAG3BM,EAA2B,CAC/B,IACAzG,EAAU0G,KACV1G,EAAU2G,OAGZ,OACE,qCACE,eAAC,EAAD,CACElD,KAAMuC,EACNlC,SAAU,CAAE8C,MAAO,OACnBlD,MAAO,SAACO,GACFA,GACFsC,IAGFN,GAAe,IARnB,0DAYE,qBAAKpB,UAAU,2BAAf,SACE,mBACEgC,OAAO,SACPC,KAAM7F,EACN4D,UAAU,0CACVkC,IAAI,aAJN,SAMG9F,MAGL,sBAAM4D,UAAU,yBAAhB,uEAIF,sBAAKA,UAAU,4CAAf,UACE,sBAAKA,UAAU,mCAAf,UACE,cAACN,EAAA,EAAD,CAAQE,QAAS,kBAAMwB,GAAe,IAAtC,SACE,cAACe,EAAA,EAAD,CAAMC,KAAK,UAAUC,KAAMhB,MAE7B,cAACiB,EAAA,EAAD,CAAatC,UAAU,OAAvB,SACG4B,EAAUzE,KAAI,SAAC5B,GAAD,OACb,cAACmE,EAAA,EAAD,CACEC,WACErD,EAAOf,OAASA,EAAO,UAAY,UAErCqE,QAAS,kBAAM9B,GNrC7BxC,EMqCmDC,ENnC5C,CACLA,KAAMH,EAAY2B,eAClBzB,aALG,IACLA,GMiCY,SAMY,MAATC,EACC,MAEA,cAAC4G,EAAA,EAAD,CACEC,KAAM7G,IAASJ,EAAU0G,KAAO,OAAS,gBAMnD,cAACU,EAAA,EAAD,CACEvC,UAAU,OACVoC,KAAM,cAACD,EAAA,EAAD,CAAMC,KAAK,SACjBxC,QAAS,WACP9B,EACElC,EACE,CACE4G,KAAM,GACNjG,IAAK,GACLhB,KAAMJ,EAAU0G,MAElBrF,EAAMU,SAIVY,EAAS/B,EAAeS,EAAMU,YAGjCZ,EAAOC,IACN,qCACE,cAAC,EAAD,CACE2D,KAAM5D,EAAOC,IACbqD,QAAS,gBAAGlB,EAAH,EAAGA,MAAH,OAAeZ,EAAS7B,EAAYyC,OAE/C,cAACgB,EAAA,EAAD,CACEC,WAAW,OACXC,QAAS,kBAAM9B,EAAS7B,EAAY,MAFtC,sBAOA,QAEN,qBAAK+D,UAAU,QAAf,SACE,cAACuC,EAAA,EAAD,CACE5C,WAAYsB,EAAW,UAAY,UACnCrB,QAAS,kBAAMsB,GAAaD,IAC5BmB,KAAM,cAACD,EAAA,EAAD,CAAMC,KAAK,gBAItBnB,EACC,cAAC,IAAD,CACEd,MAAO,CACLsC,QAAS,GACTC,aAAc,EACdC,aAAc,GACdC,OAAQ,mBAEVC,IAAKrG,EACLsG,MAAM,cAEN,S,uHCvHKC,EA1BqC,SAAC,GAK9C,IAJLC,EAII,EAJJA,SAII,IAHJtE,aAGI,MAHI,GAGJ,MAFJuE,YAEI,MAFG,GAEH,EADDlD,EACC,iBAOJ,OACE,cAACuC,EAAA,EAAD,UACGW,EAAK9F,KAAI,gBAAGiF,EAAH,EAAGA,KAAac,EAAhB,EAASxE,MAAT,OACR,cAAC6D,EAAA,EAAD,2BACMxC,GADN,IAEEqC,KAAMA,EAAO,cAACD,EAAA,EAAD,CAAMC,KAAMA,SAAWe,EACpCvD,QAAS,SAACwD,GAAD,OAZF,SAACF,EAAWE,GACrBJ,GACFA,EAASE,EAAGE,GAUSC,CAAOH,EAAGE,IAC3BzD,WAAYuD,IAAMxE,EAAQ,UAAY,mB,wBCFjC4E,GA3BmB,SAAC,GAAoB,IAAD,IAAjB5E,aAAiB,MAAT,GAAS,EACpD,OACE,cAAC,IAAD,CACE6E,QAAS,CACPC,UAAW,CACTC,EAAG,CACDC,UAAW,YAA6B,IAA1B/F,EAAyB,EAAzBA,SAAaoC,EAAY,iBACrC,OACE,8CACMA,GADN,IAEEiC,OAAO,SACPE,IAAI,sBAHN,UAKGvE,EACD,cAACwE,EAAA,EAAD,CAAMC,KAAK,gBAAgBpC,UAAU,iBAZnD,SAoBGtB,K,aCiBQiF,GArCyC,SAAC,GAGlD,IAAD,IAFJjF,aAEI,MAFI,GAEJ,EADDqB,EACC,kBACJ,EAAkCM,oBAAS,GAA3C,mBAAOuD,EAAP,KAAkBC,EAAlB,KAEA,OACE,qCACE,cAAC,EAAD,CACEZ,KAAM,CACJ,CACEb,KAAM,OACN1D,MAAO,QAET,CACE0D,KAAM,MACN1D,MAAO,YAGXA,MAAOkF,EAAY,UAAY,OAC/BZ,SAAU,SAACE,GAAD,OAAOW,EAAmB,YAANX,MAEhC,oBAAI/C,MAAO,CAAEwC,aAAc,MAC1BiB,EACC,cAAC,GAAD,CAAalF,MAAOA,IAEpB,cAACoF,EAAA,EAAD,2BACM/D,GADN,IAEErB,MAAOA,EACPqF,eAAe,WACfC,YAAY,kBCfdC,GAAeC,IAAOC,MAAtBF,WAEFG,GAAS,kBACb,oBAAIjE,MAAO,CAAEkE,MAAO,MAAOC,OAAQ,gBAG/BC,GAAQL,IAAOM,MAAM,CACzBjI,IAAK0H,KACFQ,WAAW,uBACXC,QAAQ,8BACXnJ,KAAM0I,KACHU,QACC,CAACxJ,EAAU2G,MAAO3G,EAAU0G,MAC5B,qCAED4C,WAAW,wBACdjC,KAAMyB,KAAaQ,WAAW,2BAC9B,iBAAkBR,KACfW,SAAQ,SAAC1B,EAAGD,GAAJ,OAAoBA,EAAK1H,OAASJ,EAAU2G,SACpD6C,QAAQ,CAAC,YACZ,YAAaV,KACVW,SAAQ,SAAC1B,EAAGD,GAAJ,OAAoBA,EAAK1H,OAASJ,EAAU2G,SACpD+C,MAAM,gCAgIIC,GA7HI,WACjB,MAA6CtH,IAA7C,0BAASf,EAAT,EAASA,QAASD,EAAlB,EAAkBA,MAAOE,EAAzB,EAAyBA,KAAQoB,EAAjC,KACA,EAA0BuC,mBAAS,IAAnC,mBAAO0E,EAAP,KAAcC,EAAd,KACA,EAA0B3E,qBAA1B,mBAAO3B,EAAP,KAAcuG,EAAd,KACMC,EAAUC,mBAEVC,EAAOC,mBACX,kBAAM3I,EAAKS,KAAI,qBAAGuB,WAClB,CAAChC,EAAKQ,SAcR,GAXAa,qBAAU,WACR,IAAMlC,EAAOW,EAAMC,GAEdZ,IAILoJ,EAASpJ,GACTmJ,EAAS,OACR,CAACxI,EAAOC,IAEPA,EAAU,IAAMD,EAAMC,GACxB,OAAO,KAGT,IAAM6I,EAAQ,YACR,OAAC5G,QAAD,IAACA,OAAD,EAACA,EAAOnC,MACVuB,EAASrC,EAAWgB,IAGtBqB,EAAS/B,GAAgB,KAG3B,OACE,eAACwJ,EAAA,EAAD,CAAQ3G,KAAMnC,GAAW,EAAG0C,OAAQmG,EAApC,UACE,cAACC,EAAA,EAAOjG,OAAR,WACQ,OAALZ,QAAK,IAALA,OAAA,EAAAA,EAAOnC,KACN,cAACgJ,EAAA,EAAOhG,MAAR,UACE,cAAC,EAAD,CAAqBW,KAAMxB,EAAMnC,QAEjC,OAEN,cAACgJ,EAAA,EAAO/F,KAAR,UACE,eAACgG,EAAA,EAAD,CACEC,IAAK,SAACA,GAAD,OAAeP,EAAQzI,QAAUgJ,GACtClB,MAAOA,GACPmB,aAAa,MACbC,UAAWjH,EACXkH,UAAWb,EACX/B,SAAU,SAACtE,GAAD,OAAWuG,EAASvG,IAC9BmH,QAASb,EAPX,UASE,eAACc,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,kBACA,cAACC,EAAA,EAAD,CACEC,KAAK,MACLC,SAAUC,IACVlD,KAAMmC,OAGV,eAACU,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,eAACC,EAAA,EAAD,CACEC,KAAK,OACLC,SAAUE,IACVzG,WAAW,SACXQ,MAAO,CACLkG,QAAS,OACThC,MAAO,cACPiC,aAAc,IAPlB,UAUE,eAACC,EAAA,EAAD,CAAO7H,MAAOvD,EAAU0G,KAAxB,UACE,cAACM,EAAA,EAAD,CAAMC,KAAK,OAAOpC,UAAU,SAD9B,UAIA,eAACuG,EAAA,EAAD,CAAO7H,MAAOvD,EAAU2G,MAAxB,UACE,cAACK,EAAA,EAAD,CAAMC,KAAK,OAAOpC,UAAU,SAD9B,iBAMJ,cAAC,GAAD,IACA,cAAC8F,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CACEC,KAAK,OACLC,SAAUvC,GACV6C,KAAM,GACNrG,MAAO,CAAEkE,MAAO,aAGd,OAAL3F,QAAK,IAALA,OAAA,EAAAA,EAAOnD,QAASJ,EAAU2G,MACzB,qCACE,cAAC,GAAD,IACA,cAACgE,EAAA,EAAD,UACE,cAACE,EAAA,EAAD,CAAaC,KAAK,oBAGpB,UAGR,eAACV,EAAA,EAAO9F,OAAR,WACE,cAACC,EAAA,EAAD,CACEE,QAAS,kCACPsF,EAAQzI,eADD,aACP,EAAiBgK,OAAM,SAACC,GAClBC,OAAOjK,KAAKgK,GAAO,IAAIxJ,QAI3BY,EAASlC,EAAS8C,EAAQjC,QAG9BkD,WAAW,UAVb,qBAcA,cAACD,EAAA,EAAD,CAAQC,WAAW,SAASC,QAAS0F,EAArC,2B,mDCjKFsB,GAAS,CACbvC,MAAO,OACPwC,OAAQ,QAuCKC,GApCQ,WACrB,MAAwBzG,mBAA0B,MAAlD,mBAAO0G,EAAP,KAAaC,EAAb,KACA,EAAqBxJ,IAAZM,EAAT,oBAEA,OACE,cAACmJ,GAAA,EAAD,CACEjH,UAAU,cACVkH,WAAS,EACTC,UAAU,EACVC,SAAUL,EAAO,CAACA,GAAQ,GAC1BM,YAAY,EACZC,iBAAiB,EACjBtE,SAAQ,yCAAE,WAAOuE,GAAP,oBAAA9D,EAAA,yDACa,IAAjB8D,EAAMrK,OADF,2EAKcqK,EAAM,GAAGC,gBALvB,aAKc,EAAmBC,OALjC,gDAK4C,KAL5C,OAKFC,EALE,cAQAnJ,EAAOL,KAAKsD,MAAMkG,GACxB5J,EAASzC,EAASkD,IATZ,yDAWNoJ,KAAM5C,MAAM,iBAXN,2BAeRiC,EAAQ,MAfA,0DAAF,sDAiBRY,OAAO,mBAxBT,SA0BE,qBAAKzH,MAAOyG,GAAZ,iD,kDCRSiB,GA1BV,SAAC,GAA+B,IAA7BjJ,EAA4B,EAA5BA,KAAMkJ,EAAsB,EAAtBA,UAAWjM,EAAW,EAAXA,KACvB,OAAKA,EAKH,eAAC,EAAD,CACE+C,KAAMA,EACNC,MAAOiJ,EACP/I,SAAS,SACTC,QAAQ,SACRC,SAAU,CAAEU,WAAY,UAAWoC,MAAO,OAL5C,qDAQE,sBAAM/B,UAAU,0CAAhB,SACGnE,EAAKU,MACA,IAVV,WAYE,sBAAMyD,UAAU,0CAAhB,SACGnE,EAAKN,OAbV,OAJO,M,kBCYLwM,GAAqC,SAAC,GAAc,IAAZlM,EAAW,EAAXA,KAC5C,OACE,cAACmM,GAAA,EAAD,CACEC,iBAAe,EACfC,UAAU,OACVC,QAAQ,QACRC,QAAS,YAA8B,IAA3BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,KAASvI,EAAY,kBACpC,OACE,cAACwI,GAAA,EAAD,yBACEzJ,MAAQjD,EAAaiD,OAAS,GAC9BqB,MAAO,CAAEkI,MAAKC,SACVvI,GAHN,aAKE,0BAASC,UAAU,8DAAnB,UACGnE,EAAKN,OAASJ,EAAU2G,OACD,YAAxBjG,EAAK2M,MAAMC,UACX5M,EAAK2M,MAAME,KACT,wBACE7B,OAAQ,IACRxC,MAAO,OACPxB,IAAKhH,EAAK2M,MAAME,KAChB5J,MAAOjD,EAAKiD,MACZ6J,MAAM,2FACNC,iBAAe,IAEf,KACJ,cAAC,GAAD,CAAalK,MAAO7C,EAAK2G,cAxBnC,SA8BE,cAACL,EAAA,EAAD,CACEC,KAAO,WACL,OAAQvG,EAAKN,MACX,KAAKJ,EAAU0G,KACb,MAAO,OACT,KAAK1G,EAAU2G,MACb,MAAO,OACT,QACE,MAAO,YAPN,GAUP9B,UAAU,8CAuHH6I,GAjHO,WACpB,MAA4CrL,IAA5C,0BAAShB,EAAT,EAASA,MAAOF,EAAhB,EAAgBA,OAAQI,EAAxB,EAAwBA,KAAQoB,EAAhC,KACA,EAA0BuC,oBAAkB,GAA5C,mBAAO3E,EAAP,KAAcoN,EAAd,KAEMC,EAAa1D,mBAAkB,WACnC,OAAO3I,EAAKS,KAAI,qBAAGuB,WAClB,CAAChC,IAEJ,OACE,qCACE,cAAC,GAAD,CACEb,KAAMW,EAAMd,GACZkD,OAAQpC,EAAMd,GACdoM,UAAW,SAACkB,GACNA,GACFlL,EAASrC,EAAWC,IAGtBoN,GAAU,MAGI,IAAjBtM,EAAMU,OACL,sBAAK8C,UAAU,+EAAf,qDAC2C,IACzC,sBAAMA,UAAU,0CAAhB,uBAEQ,IAJV,SAKS,IACP,mBAAGiC,KAAK,YAAYD,OAAO,SAA3B,6BAIA,KACJ,cAACiH,GAAA,EAAD,CAAMC,OAAK,EAAX,SACG1M,EAAMW,KAAI,SAACtB,EAAMH,GAChB,IACGG,EAAKU,IAAI4M,WAAW7M,EAAOC,MACX,MAAhBD,EAAOf,MAAgBM,EAAKN,OAASe,EAAOf,KAE7C,OAAO,KAGT,IAAM6N,EAAYL,EAAWM,SAASxN,EAAKU,KAE3C,OACE,cAAC0M,GAAA,EAAKrI,KAAN,CAAwClF,MAAOA,EAA/C,SACE,eAAC4N,GAAA,EAAD,WAEE,cAACA,GAAA,EAAY1I,KAAb,CACE2I,QAAS,EACTvJ,UAAU,wCAFZ,SAIE,cAAC,GAAD,CAAenE,KAAMA,MAGvB,eAACyN,GAAA,EAAY1I,KAAb,CACE2I,QAAS,GACTvJ,UAAU,qBAFZ,WAIIoJ,GACA,cAACpB,GAAA,EAAD,CACEG,QAAQ,QACRD,UAAU,OACVE,QACE,cAACoB,GAAA,EAAD,UACE,qBAAKxJ,UAAU,MAAf,iCALN,SASE,cAACmC,EAAA,EAAD,CACEC,KAAK,OACLpC,UAAU,yDAIhB,cAAC,EAAD,CACEG,MAAO,CACLsJ,WAAYL,EAAY,GAAK,SAE/BlJ,KAAMrE,EAAKU,IACXqD,QAAS,gBAAGlB,EAAH,EAAGA,MAAH,OACPZ,EAAS7B,EAAYyC,UAI3B,eAAC4K,GAAA,EAAY1I,KAAb,CACE2I,QAAS,EACTvJ,UAAU,wCAFZ,UAIE,cAACN,EAAA,EAAD,CACEqC,MAAM,SACNpC,WAAW,OACXC,QAAS,kBAAMkJ,EAASpN,IAH1B,oBAOA,sBAAMsE,UAAU,MAAhB,eACA,cAACN,EAAA,EAAD,CACEC,WAAW,OACXC,QAAS,kBAAM9B,EAAS/B,EAAeL,KAFzC,yBApDN,UAAmBG,EAAKU,IAAxB,YAA+Bb,aCrF5BgO,GAxBC,WACd,OACE,eAAC,EAAD,WACE,mBACE1J,UAAU,qBACViC,KAAK,0CACL,cAAY,oBACZnD,MAAM,oBACNkD,OAAO,SACPE,IAAI,aANN,+BAWA,sBAAKlC,UAAU,wBAAf,UACE,cAAC,GAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,WCXO2J,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxL,MAAK,YAAkD,IAA/CyL,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.600df1e8.chunk.js","sourcesContent":["export enum EItemType {\n  TEXT = 'text',\n  VIDEO = 'video',\n}\n\nexport interface IItem {\n  key: string;\n  body: string;\n  type: EItemType;\n}\n\nexport interface IVideoItem extends IItem {\n  type: EItemType.VIDEO;\n  video: {\n    provider: string;\n    link: string;\n  };\n  title: string;\n}\n\nexport interface ITextItem extends IItem {\n  type: EItemType.TEXT;\n}\n\nexport type TItem = IVideoItem | ITextItem;\n\nexport interface IKeyItem {\n  label: string;\n  group: string;\n  value: string;\n}\n\nexport type TFilterType = '*' | EItemType;\n\nexport interface IAppState {\n  items: TItem[];\n  current: number;\n  filter: {\n    key: string;\n    type: TFilterType;\n  };\n  keys: IKeyItem[];\n}\n\nexport enum EActionType {\n  SET_CURRENT_ITEM = 'Edit item',\n  REMOVE_ITEM = 'Remove item',\n  SAVE_ITEM = 'SAVE item',\n  SET_KEYS = 'Set Keys',\n  SET_ITEMS = 'Set Items',\n  FILTER_BY_KEY = 'Filter by key',\n  FILTER_BY_TYPE = 'Filter by type',\n}\n\nexport interface TSetCurrentItemAction {\n  type: EActionType.SET_CURRENT_ITEM;\n  payload: number;\n}\n\nexport interface TSetKeysAction {\n  type: EActionType.SET_KEYS;\n  payload: IKeyItem[];\n}\n\nexport interface TRemoveItemAction {\n  type: EActionType.REMOVE_ITEM;\n  payload: number;\n}\n\nexport interface TSaveItemAction {\n  type: EActionType.SAVE_ITEM;\n  payload: {\n    item: TItem;\n    index: number;\n  };\n}\n\nexport interface TSetItemsAction {\n  type: EActionType.SET_ITEMS;\n  payload: TItem[];\n}\n\nexport interface TFilterByKeyAction {\n  type: EActionType.FILTER_BY_KEY;\n  payload: string;\n}\n\nexport interface TFilterByTypeAction {\n  type: EActionType.FILTER_BY_TYPE;\n  payload: TFilterType;\n}\n\nexport type TAction =\n  | TSetCurrentItemAction\n  | TSetKeysAction\n  | TRemoveItemAction\n  | TSaveItemAction\n  | TFilterByKeyAction\n  | TFilterByTypeAction\n  | TSetItemsAction;\n","import {\n  EActionType,\n  IKeyItem,\n  TFilterType,\n  TItem,\n  TRemoveItemAction,\n  TSaveItemAction,\n  TSetCurrentItemAction,\n  TFilterByKeyAction,\n  TSetItemsAction,\n  TSetKeysAction,\n  TFilterByTypeAction,\n} from './interfaces.store';\n\nexport function setItems(payload: TItem[]): TSetItemsAction {\n  return {\n    type: EActionType.SET_ITEMS,\n    payload,\n  };\n}\n\nexport function removeItem(index: number): TRemoveItemAction {\n  return {\n    type: EActionType.REMOVE_ITEM,\n    payload: index,\n  };\n}\n\nexport function saveItem(\n  item: TItem,\n  index: number,\n): TSaveItemAction {\n  return {\n    type: EActionType.SAVE_ITEM,\n    payload: { item, index },\n  };\n}\n\nexport function setKeys(keys: IKeyItem[]): TSetKeysAction {\n  return {\n    type: EActionType.SET_KEYS,\n    payload: keys,\n  };\n}\n\nexport function setCurrentItem(\n  payload: number,\n): TSetCurrentItemAction {\n  return {\n    type: EActionType.SET_CURRENT_ITEM,\n    payload,\n  };\n}\n\nexport function filterByKey(payload: string): TFilterByKeyAction {\n  return {\n    type: EActionType.FILTER_BY_KEY,\n    payload,\n  };\n}\n\nexport function filterByType(\n  payload: TFilterType,\n): TFilterByTypeAction {\n  return {\n    type: EActionType.FILTER_BY_TYPE,\n    payload,\n  };\n}\n","import { IAppState } from './interfaces.store';\n\nexport const TIPS_STORAGE_KEY = '__TIPS__';\nexport const TIPS_URL =\n  'https://raw.githubusercontent.com/midrissi/Web-studio-TIPS/main/tips.json';\n\nexport const initialState: IAppState = {\n  filter: {\n    key: '',\n    type: '*',\n  },\n  items: [],\n  current: -1,\n  keys: [],\n};\n","import { remove } from 'lodash';\nimport { Reducer } from 'react';\nimport { sortBy } from 'lodash';\nimport { initialState } from './constants.store';\nimport { EActionType, IAppState, TAction } from './interfaces.store';\n\nexport const appReducer: Reducer<IAppState, TAction> = (\n  state: IAppState = initialState,\n  action: TAction,\n): IAppState => {\n  switch (action.type) {\n    case EActionType.SET_KEYS:\n      return {\n        ...state,\n        keys: action.payload,\n      };\n    case EActionType.FILTER_BY_KEY:\n      return {\n        ...state,\n        filter: {\n          ...state.filter,\n          key: action.payload,\n        },\n      };\n    case EActionType.FILTER_BY_TYPE:\n      return {\n        ...state,\n        filter: {\n          ...state.filter,\n          type: action.payload,\n        },\n      };\n    case EActionType.SET_ITEMS:\n      return {\n        ...state,\n        items: sortBy(action.payload, ['key']),\n      };\n    case EActionType.REMOVE_ITEM:\n      return {\n        ...state,\n        items: remove(\n          state.items,\n          (item, index) => index !== action.payload,\n        ),\n      };\n    case EActionType.SAVE_ITEM: {\n      const { index, item } = action.payload;\n\n      if (index >= state.items.length) {\n        return {\n          ...state,\n          current: -1,\n          items: [...state.items, item],\n        };\n      }\n\n      return {\n        ...state,\n        current: -1,\n        items: state.items.map((current, i) =>\n          index === i ? item : current,\n        ),\n      };\n    }\n    case EActionType.SET_CURRENT_ITEM:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  createContext,\n  useContext,\n  useReducer,\n  FC,\n  Dispatch,\n  useEffect,\n} from 'react';\nimport { setKeys } from './actions.store';\nimport { initialState, TIPS_STORAGE_KEY } from './constants.store';\nimport { IAppState, IKeyItem, TAction } from './interfaces.store';\nimport { appReducer } from './reducer.store';\n\nconst Store = createContext<[IAppState, Dispatch<TAction>]>([\n  initialState,\n  () => {},\n]);\n\nStore.displayName = 'Store';\n\nexport const useStore = () => useContext(Store);\n\nexport const StoreProvider: FC = ({ children }) => {\n  const [globalState, dispatch] = useReducer(\n    appReducer,\n    initialState,\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\n      TIPS_STORAGE_KEY,\n      JSON.stringify(globalState.items),\n    );\n  }, [globalState.items]);\n\n  useEffect(() => {\n    fetch('keys.json')\n      .then((res) => res.json() as Promise<IKeyItem[]>)\n      .then((keys) => dispatch(setKeys(keys)));\n  }, []);\n\n  return (\n    <Store.Provider value={[globalState, dispatch]}>\n      {children}\n    </Store.Provider>\n  );\n};\n","import { FC } from 'react';\nimport { Button, ButtonProps, Modal } from 'rsuite';\n\nconst ConfirmDialog: FC<\n  Partial<{\n    show: boolean;\n    title: string;\n    yesLabel: string;\n    noLabel: string;\n    yesProps: ButtonProps;\n    noProps: ButtonProps;\n    onYes: (isYes: boolean) => void;\n  }>\n> = ({\n  show,\n  onYes,\n  title = 'Confirm',\n  children,\n  yesLabel = 'Yes',\n  noLabel = 'No',\n  yesProps = {},\n  noProps = {},\n}) => {\n  function onHide(isYes: boolean) {\n    if (onYes) {\n      onYes(isYes);\n    }\n  }\n\n  return (\n    <Modal show={show} onHide={() => onHide(false)}>\n      <Modal.Header>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{children}</Modal.Body>\n      <Modal.Footer>\n        <Button\n          appearance=\"primary\"\n          {...yesProps}\n          onClick={() => onHide(true)}\n        >\n          {yesLabel}\n        </Button>\n        <Button\n          appearance=\"subtle\"\n          {...noProps}\n          onClick={() => onHide(false)}\n        >\n          {noLabel}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ConfirmDialog;\n","import { CSSProperties, FC, useState } from 'react';\nimport { Breadcrumb } from 'rsuite';\nimport './breadcrumb.style.css';\n\ninterface ArrowProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  active: boolean;\n}\n\nconst Arrow: FC<ArrowProps> = ({ children, active, ...props }) => {\n  return (\n    <div className={`rs-item ${active ? 'active' : ''}`} {...props}>\n      {children}\n    </div>\n  );\n};\n\ninterface BreadcrumbComponentProps {\n  path: string;\n  style?: CSSProperties;\n  className?: string;\n  onClick?: (ev: { value: string; index: number }) => void;\n}\n\nconst BreadcrumbComponent: FC<BreadcrumbComponentProps> = ({\n  path = '',\n  onClick,\n  className = '',\n  style = {},\n}) => {\n  const items = path.split(':');\n  const [activeIndex, setActiveIndex] = useState<number>(-1);\n\n  return (\n    <Breadcrumb\n      separator=\"\"\n      style={style}\n      className={`${className} font-medium whitespace-nowrap`}\n    >\n      {items.map((item, index) => {\n        const current = items.slice(0, index + 1).join(':');\n        return (\n          <Breadcrumb.Item\n            key={current}\n            renderItem={() => (\n              <Arrow\n                onMouseEnter={() => setActiveIndex(index)}\n                onMouseLeave={() => setActiveIndex(-1)}\n                active={activeIndex >= index}\n                onClick={() => {\n                  if (onClick) {\n                    onClick({\n                      value: current,\n                      index,\n                    });\n                  }\n                }}\n              >\n                {item}\n              </Arrow>\n            )}\n          />\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n\nexport default BreadcrumbComponent;\n","import { FC, useEffect, useState } from 'react';\nimport ReactJson from 'react-json-view';\nimport { Button, ButtonGroup, Icon, IconButton } from 'rsuite';\nimport {\n  filterByKey,\n  filterByType,\n  saveItem,\n  setCurrentItem,\n  setItems,\n} from '~/store/actions.store';\nimport { TIPS_STORAGE_KEY, TIPS_URL } from '~/store/constants.store';\nimport {\n  EItemType,\n  TFilterType,\n  TItem,\n} from '~/store/interfaces.store';\nimport { useStore } from '~/store/provider.store';\nimport ConfirmDialog from './dialogs/confirm.dialog';\nimport BreadcrumbComponent from './dumb/breadcrumb.dumb';\n\nconst Code: FC = () => {\n  const [{ items, filter }, dispatch] = useStore();\n  const [showCode, setShowCode] = useState<boolean>(false);\n  const [showRefresh, setShowRefresh] = useState<boolean>(false);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  useEffect(() => {\n    const cache = localStorage.getItem(TIPS_STORAGE_KEY);\n    let items: TItem[] = [];\n\n    if (cache) {\n      try {\n        items = JSON.parse(\n          localStorage.getItem(TIPS_STORAGE_KEY) || '[]',\n        ) as TItem[];\n      } catch (e) {\n        items = [];\n      }\n\n      dispatch(setItems(items));\n      return;\n    }\n\n    refresh();\n  }, []);\n\n  const refresh = () => {\n    setIsFetching(true);\n    fetch(TIPS_URL)\n      .then((res) => res.json() as Promise<TItem[]>)\n      .then((json) => dispatch(setItems(json)))\n      .finally(() => setIsFetching(false));\n  };\n\n  const ALL_TYPES: TFilterType[] = [\n    '*',\n    EItemType.TEXT,\n    EItemType.VIDEO,\n  ];\n\n  return (\n    <>\n      <ConfirmDialog\n        show={showRefresh}\n        yesProps={{ color: 'red' }}\n        onYes={(isYes) => {\n          if (isYes) {\n            refresh();\n          }\n\n          setShowRefresh(false);\n        }}\n      >\n        Reloading the view will fetch the items from:\n        <div className=\"flex justify-center my-5\">\n          <a\n            target=\"_blank\"\n            href={TIPS_URL}\n            className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\"\n            rel=\"noreferrer\"\n          >\n            {TIPS_URL}\n          </a>\n        </div>\n        <span className=\"text-red-400 underline\">\n          All your changes will be lost. Do you want to proceed?\n        </span>\n      </ConfirmDialog>\n      <div className=\"w-full flex justify-between flex-row my-3\">\n        <div className=\"flex justify-center align-middle\">\n          <Button onClick={() => setShowRefresh(true)}>\n            <Icon icon=\"refresh\" spin={isFetching}></Icon>\n          </Button>\n          <ButtonGroup className=\"mx-4\">\n            {ALL_TYPES.map((type) => (\n              <Button\n                appearance={\n                  filter.type === type ? 'primary' : 'default'\n                }\n                onClick={() => dispatch(filterByType(type))}\n              >\n                {type === '*' ? (\n                  'All'\n                ) : (\n                  <Icon\n                    icon={type === EItemType.TEXT ? 'code' : 'film'}\n                  />\n                )}\n              </Button>\n            ))}\n          </ButtonGroup>\n          <IconButton\n            className=\"mr-4\"\n            icon={<Icon icon=\"plus\" />}\n            onClick={() => {\n              dispatch(\n                saveItem(\n                  {\n                    body: '',\n                    key: '',\n                    type: EItemType.TEXT,\n                  },\n                  items.length,\n                ),\n              );\n\n              dispatch(setCurrentItem(items.length));\n            }}\n          />\n          {filter.key ? (\n            <>\n              <BreadcrumbComponent\n                path={filter.key}\n                onClick={({ value }) => dispatch(filterByKey(value))}\n              />\n              <Button\n                appearance=\"link\"\n                onClick={() => dispatch(filterByKey(''))}\n              >\n                Clear\n              </Button>\n            </>\n          ) : null}\n        </div>\n        <div className=\"block\">\n          <IconButton\n            appearance={showCode ? 'primary' : 'default'}\n            onClick={() => setShowCode(!showCode)}\n            icon={<Icon icon=\"code\" />}\n          />\n        </div>\n      </div>\n      {showCode ? (\n        <ReactJson\n          style={{\n            padding: 10,\n            borderRadius: 6,\n            marginBottom: 12,\n            border: '1px dashed gray',\n          }}\n          src={items}\n          theme=\"solarized\"\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default Code;\n","import { FC, SyntheticEvent } from 'react';\nimport { IconNames } from 'rsuite/lib/Icon';\nimport {\n  IconButton,\n  Icon,\n  IconButtonProps,\n  ButtonGroup,\n} from 'rsuite';\n\nexport interface IButtonGroupProps extends IconButtonProps {\n  onChange?: (value: string, event: SyntheticEvent) => void;\n  value?: string;\n  data?: {\n    value: string;\n    icon: IconNames;\n  }[];\n}\n\nconst ButtonGroupComponent: FC<IButtonGroupProps> = ({\n  onChange,\n  value = '',\n  data = [],\n  ...props\n}) => {\n  const change = (v: string, ev: SyntheticEvent) => {\n    if (onChange) {\n      onChange(v, ev);\n    }\n  };\n\n  return (\n    <ButtonGroup>\n      {data.map(({ icon, value: v }) => (\n        <IconButton\n          {...props}\n          icon={icon ? <Icon icon={icon} /> : undefined}\n          onClick={(ev) => change(v, ev)}\n          appearance={v === value ? 'primary' : 'default'}\n        />\n      ))}\n    </ButtonGroup>\n  );\n};\n\nexport default ButtonGroupComponent;\n","import Markdown from 'markdown-to-jsx';\nimport { FC } from 'react';\nimport { Icon } from 'rsuite';\n\nexport interface IMdProps {\n  value?: string;\n}\n\nconst MdComponent: FC<IMdProps> = ({ value = '' }) => {\n  return (\n    <Markdown\n      options={{\n        overrides: {\n          a: {\n            component: ({ children, ...props }) => {\n              return (\n                <a\n                  {...props}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {children}\n                  <Icon icon=\"external-link\" className=\"ml-1\" />\n                </a>\n              );\n            },\n          },\n        },\n      }}\n    >\n      {value}\n    </Markdown>\n  );\n};\n\nexport default MdComponent;\n","import { FC, SyntheticEvent, useState } from 'react';\nimport { Input, InputProps } from 'rsuite';\nimport ButtonGroupComponent from './button-group.dumb';\nimport MdComponent from './md.dumb';\n\nexport interface IMdWithPreviewProps extends InputProps {\n  onChange?: (value: string, event: SyntheticEvent) => void;\n  value?: string;\n}\n\nconst MdWithPreviewComponent: FC<IMdWithPreviewProps> = ({\n  value = '',\n  ...props\n}) => {\n  const [isPreview, setIsPreview] = useState(false);\n\n  return (\n    <>\n      <ButtonGroupComponent\n        data={[\n          {\n            icon: 'code',\n            value: 'code',\n          },\n          {\n            icon: 'eye',\n            value: 'preview',\n          },\n        ]}\n        value={isPreview ? 'preview' : 'code'}\n        onChange={(v) => setIsPreview(v === 'preview')}\n      />\n      <br style={{ marginBottom: 10 }} />\n      {isPreview ? (\n        <MdComponent value={value} />\n      ) : (\n        <Input\n          {...props}\n          value={value}\n          componentClass=\"textarea\"\n          placeholder=\"Textarea\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default MdWithPreviewComponent;\n","import { FC, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  AutoComplete,\n  Button,\n  ControlLabel,\n  Drawer,\n  Form,\n  FormControl,\n  FormGroup,\n  Icon,\n  Radio,\n  RadioGroup,\n  Schema,\n} from 'rsuite';\nimport { FormInstance } from 'rsuite/lib/Form';\nimport {\n  removeItem,\n  saveItem,\n  setCurrentItem,\n} from '~/store/actions.store';\nimport { EItemType, TItem } from '~/store/interfaces.store';\nimport { useStore } from '~/store/provider.store';\nimport BreadcrumbComponent from './dumb/breadcrumb.dumb';\nimport MdWithPreviewComponent from './dumb/md-preview.dumb';\n\nconst { StringType } = Schema.Types;\n\nconst Hr: FC = () => (\n  <hr style={{ width: '80%', margin: '15px auto' }} />\n);\n\nconst model = Schema.Model({\n  key: StringType()\n    .isRequired('The key is required')\n    .pattern(/^[0-9a-z]+(?::[0-9a-z]+)*$/),\n  type: StringType()\n    .isOneOf(\n      [EItemType.VIDEO, EItemType.TEXT],\n      'The specified type is unsupported',\n    )\n    .isRequired('The type is required'),\n  body: StringType().isRequired('The content is required'),\n  'video.provider': StringType()\n    .addRule((v, data: TItem) => data.type === EItemType.VIDEO)\n    .isOneOf(['youtube']),\n  'video.url': StringType()\n    .addRule((v, data: TItem) => data.type === EItemType.VIDEO)\n    .isURL('Please specify a valid URL'),\n});\n\nconst Detail: FC = () => {\n  const [{ current, items, keys }, dispatch] = useStore();\n  const [error, setError] = useState({});\n  const [value, setValue] = useState<TItem>();\n  const formRef = useRef<FormInstance>();\n\n  const KEYS = useMemo(\n    () => keys.map(({ value }) => value),\n    [keys.length],\n  );\n\n  useEffect(() => {\n    const item = items[current];\n\n    if (!item) {\n      return;\n    }\n\n    setValue(item);\n    setError({});\n  }, [items, current]);\n\n  if (current < 0 || !items[current]) {\n    return null;\n  }\n\n  const close = () => {\n    if (!value?.key) {\n      dispatch(removeItem(current));\n    }\n\n    dispatch(setCurrentItem(-1));\n  };\n\n  return (\n    <Drawer show={current >= 0} onHide={close}>\n      <Drawer.Header>\n        {value?.key ? (\n          <Drawer.Title>\n            <BreadcrumbComponent path={value.key} />\n          </Drawer.Title>\n        ) : null}\n      </Drawer.Header>\n      <Drawer.Body>\n        <Form\n          ref={(ref: any) => (formRef.current = ref)}\n          model={model}\n          autoComplete=\"off\"\n          formValue={value}\n          formError={error}\n          onChange={(value) => setValue(value as TItem)}\n          onCheck={setError}\n        >\n          <FormGroup>\n            <ControlLabel>Key</ControlLabel>\n            <FormControl\n              name=\"key\"\n              accepter={AutoComplete}\n              data={KEYS}\n            />\n          </FormGroup>\n          <FormGroup>\n            <ControlLabel>Type</ControlLabel>\n            <FormControl\n              name=\"type\"\n              accepter={RadioGroup}\n              appearance=\"picker\"\n              style={{\n                display: 'flex',\n                width: 'fit-content',\n                paddingRight: 10,\n              }}\n            >\n              <Radio value={EItemType.TEXT}>\n                <Icon icon=\"code\" className=\"mr-4\" />\n                Text\n              </Radio>\n              <Radio value={EItemType.VIDEO}>\n                <Icon icon=\"code\" className=\"mr-4\" />\n                Video\n              </Radio>\n            </FormControl>\n          </FormGroup>\n          <Hr />\n          <FormGroup>\n            <FormControl\n              name=\"body\"\n              accepter={MdWithPreviewComponent}\n              rows={10}\n              style={{ width: '100%' }}\n            />\n          </FormGroup>\n          {value?.type === EItemType.VIDEO ? (\n            <>\n              <Hr />\n              <FormGroup>\n                <FormControl name=\"video.link\" />\n              </FormGroup>\n            </>\n          ) : null}\n        </Form>\n      </Drawer.Body>\n      <Drawer.Footer>\n        <Button\n          onClick={() =>\n            formRef.current?.check((err) => {\n              if (Object.keys(err || {}).length) {\n                return;\n              }\n\n              dispatch(saveItem(value!, current));\n            })\n          }\n          appearance=\"primary\"\n        >\n          Confirm\n        </Button>\n        <Button appearance=\"subtle\" onClick={close}>\n          Cancel\n        </Button>\n      </Drawer.Footer>\n    </Drawer>\n  );\n};\n\nexport default Detail;\n","import { FC, useState } from 'react';\nimport { Alert, Uploader } from 'rsuite';\nimport { FileType } from 'rsuite/lib/Uploader';\nimport { setItems } from '~/store/actions.store';\nimport { useStore } from '~/store/provider.store';\n\nconst styles = {\n  width: '100%',\n  height: '100%',\n};\n\nconst FileUpload: FC = () => {\n  const [file, setFile] = useState<FileType | null>(null);\n  const [, dispatch] = useStore();\n\n  return (\n    <Uploader\n      className=\"w-full mb-3\"\n      draggable\n      multiple={false}\n      fileList={file ? [file] : []}\n      autoUpload={false}\n      fileListVisible={false}\n      onChange={async (files) => {\n        if (files.length === 0) {\n          return;\n        }\n\n        const result = (await files[0].blobFile?.text()) || '[]';\n\n        try {\n          const json = JSON.parse(result);\n          dispatch(setItems(json));\n        } catch (e) {\n          Alert.error('Invalid JSON.');\n          return;\n        }\n\n        setFile(null);\n      }}\n      accept=\"application/json\"\n    >\n      <div style={styles}>Click or Drag files to this area</div>\n    </Uploader>\n  );\n};\n\nexport default FileUpload;\n","import { FC } from 'react';\nimport { IItem } from '~/store/interfaces.store';\nimport ConfirmDialog from './confirm.dialog';\n\nconst RemoveModal: FC<{\n  item?: IItem;\n  show: boolean;\n  onConfirm?: (isRemove: boolean) => void;\n}> = ({ show, onConfirm, item }) => {\n  if (!item) {\n    return null;\n  }\n\n  return (\n    <ConfirmDialog\n      show={show}\n      onYes={onConfirm}\n      yesLabel=\"Remove\"\n      noLabel=\"Cancel\"\n      yesProps={{ appearance: 'primary', color: 'red' }}\n    >\n      Are you sure you want to remove the key:\n      <span className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\">\n        {item.key}\n      </span>{' '}\n      of type:\n      <span className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\">\n        {item.type}\n      </span>\n      ?\n    </ConfirmDialog>\n  );\n};\n\nexport default RemoveModal;\n","import { FC, useMemo, useState } from 'react';\nimport {\n  Button,\n  FlexboxGrid,\n  Icon,\n  List,\n  Popover,\n  Tooltip,\n  Whisper,\n} from 'rsuite';\nimport { IconNames } from 'rsuite/lib/Icon';\nimport {\n  filterByKey,\n  removeItem,\n  setCurrentItem,\n} from '~/store/actions.store';\nimport { EItemType, TItem } from '~/store/interfaces.store';\nimport { useStore } from '~/store/provider.store';\nimport RemoveModal from './dialogs/confirm-remove.dialog';\nimport BreadcrumbComponent from './dumb/breadcrumb.dumb';\nimport MdComponent from './dumb/md.dumb';\n\nconst IconComponent: FC<{ item: TItem }> = ({ item }) => {\n  return (\n    <Whisper\n      preventOverflow\n      placement=\"auto\"\n      trigger=\"click\"\n      speaker={({ top, left, ...props }) => {\n        return (\n          <Popover\n            title={(item as any).title || ''}\n            style={{ top, left }}\n            {...props}\n          >\n            <article className=\"prose text-left prose-sm overflow-auto p-1 max-h-80 text-sm\">\n              {item.type === EItemType.VIDEO &&\n              item.video.provider === 'youtube' &&\n              item.video.link ? (\n                <iframe\n                  height={200}\n                  width={'100%'}\n                  src={item.video.link}\n                  title={item.title}\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              ) : null}\n              <MdComponent value={item.body} />\n            </article>\n          </Popover>\n        );\n      }}\n    >\n      <Icon\n        icon={((): IconNames => {\n          switch (item.type) {\n            case EItemType.TEXT:\n              return 'code';\n            case EItemType.VIDEO:\n              return 'film';\n            default:\n              return 'question';\n          }\n        })()}\n        className=\"text-gray-300 text-base cursor-pointer\"\n      />\n    </Whisper>\n  );\n};\n\nconst ItemsList: FC = () => {\n  const [{ items, filter, keys }, dispatch] = useStore();\n  const [index, setIndex] = useState<number>(-1);\n\n  const keysString = useMemo<string[]>(() => {\n    return keys.map(({ value }) => value);\n  }, [keys]);\n\n  return (\n    <>\n      <RemoveModal\n        item={items[index]}\n        show={!!items[index]}\n        onConfirm={(isRemove) => {\n          if (isRemove) {\n            dispatch(removeItem(index));\n          }\n\n          setIndex(-1);\n        }}\n      ></RemoveModal>\n      {items.length === 0 ? (\n        <div className=\"text-center bg-[#292d33] border-dashed rounded-md border border-gray-200 p-3\">\n          The list is empty. Please upload a valid{' '}\n          <span className=\"bg-gray-500 p-1 text-xs rounded-md mx-1\">\n            JSON file\n          </span>{' '}\n          or use{' '}\n          <a href=\"tips.json\" target=\"_blank\">\n            this example\n          </a>\n        </div>\n      ) : null}\n      <List hover>\n        {items.map((item, index) => {\n          if (\n            !item.key.startsWith(filter.key) ||\n            (filter.type !== '*' && item.type !== filter.type)\n          ) {\n            return null;\n          }\n\n          const keyExists = keysString.includes(item.key);\n\n          return (\n            <List.Item key={`${item.key}:${index}`} index={index}>\n              <FlexboxGrid>\n                {/*icon*/}\n                <FlexboxGrid.Item\n                  colspan={2}\n                  className=\"flex justify-center items-center h-16\"\n                >\n                  <IconComponent item={item} />\n                </FlexboxGrid.Item>\n                {/*base info*/}\n                <FlexboxGrid.Item\n                  colspan={19}\n                  className=\"flex flex-row h-16\"\n                >\n                  {!keyExists && (\n                    <Whisper\n                      trigger=\"hover\"\n                      placement=\"left\"\n                      speaker={\n                        <Tooltip>\n                          <div className=\"p-2\">Key not supported</div>\n                        </Tooltip>\n                      }\n                    >\n                      <Icon\n                        icon=\"info\"\n                        className=\"flex items-center mr-2 text-red-400 cursor-pointer\"\n                      />\n                    </Whisper>\n                  )}\n                  <BreadcrumbComponent\n                    style={{\n                      marginLeft: keyExists ? 22 : 'unset',\n                    }}\n                    path={item.key}\n                    onClick={({ value }) =>\n                      dispatch(filterByKey(value))\n                    }\n                  />\n                </FlexboxGrid.Item>\n                <FlexboxGrid.Item\n                  colspan={2}\n                  className=\"flex justify-center items-center h-16\"\n                >\n                  <Button\n                    color=\"orange\"\n                    appearance=\"link\"\n                    onClick={() => setIndex(index)}\n                  >\n                    Remove\n                  </Button>\n                  <span className=\"p-1\">|</span>\n                  <Button\n                    appearance=\"link\"\n                    onClick={() => dispatch(setCurrentItem(index))}\n                  >\n                    Edit\n                  </Button>\n                </FlexboxGrid.Item>\n              </FlexboxGrid>\n            </List.Item>\n          );\n        })}\n      </List>\n    </>\n  );\n};\n\nexport default ItemsList;\n","import { FC } from 'react';\nimport Code from '~/components/code.component';\nimport Detail from '~/components/detail.component';\nimport FileUpload from '~/components/file-upload.component';\nimport List from '~/components/list.component';\nimport { StoreProvider } from '~/store/provider.store';\n\nconst App: FC = () => {\n  return (\n    <StoreProvider>\n      <a\n        className=\"github-fork-ribbon\"\n        href=\"https://github.com/midrissi/tips-editor\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Fork me on GitHub\n      </a>\n\n      <div className=\"max-w-7xl m-auto mt-4\">\n        <FileUpload></FileUpload>\n        <Code></Code>\n        <List></List>\n        <Detail></Detail>\n      </div>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}