{"version":3,"sources":["api.service.ts","store/constants.store.ts","utils/utils.ts","store/interfaces.store.ts","store/actions.store.ts","store/reducer.store.ts","store/provider.store.tsx","components/dialogs/confirm.dialog.tsx","components/dumb/password.dumb.tsx","components/dialogs/save.dialog.tsx","components/dumb/breadcrumb.dumb.tsx","components/code.component.tsx","components/dumb/button-group.dumb.tsx","components/dumb/md.dumb.tsx","components/dumb/md-preview.dumb.tsx","components/detail.component.tsx","components/file-upload.component.tsx","components/dialogs/confirm-remove.dialog.tsx","components/list.component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetchItems","fetch","TIPS_URL","then","res","json","update","items","message","auth","a","octokit","Octokit","repo_info","getRepoInfo","Error","branch","owner","path","repo","request","data","content","Buffer","from","JSON","stringify","toString","sha","TIPS_STORAGE_KEY","initialState","filter","key","type","current","keys","flattenObj","object","result","i","Array","isArray","temp","j","unflattenObj","attr","set","memoize","match","exec","groups","getRepoLink","infos","getFilePath","EItemType","EActionType","setItems","payload","SET_ITEMS","removeItem","index","REMOVE_ITEM","saveItem","item","SAVE_ITEM","setCurrentItem","SET_CURRENT_ITEM","filterByKey","FILTER_BY_KEY","appReducer","state","action","SET_KEYS","FILTER_BY_TYPE","sortBy","remove","length","map","Store","createContext","displayName","useStore","useContext","StoreProvider","children","useReducer","globalState","dispatch","useEffect","localStorage","setItem","setKeys","Provider","value","ConfirmDialog","show","onYes","title","yesLabel","noLabel","yesProps","noProps","onHide","isYes","Modal","Header","Title","Body","Footer","Button","appearance","onClick","PasswordComponent","props","useState","visible","setVisible","InputGroup","inside","Input","Icon","icon","StringType","Schema","Types","model","Model","token","isRequired","SaveComponent","formRef","useRef","error","setError","setValue","color","check","catch","e","console","save","className","target","href","rel","Form","ref","autoComplete","formValue","formError","onChange","onCheck","FormGroup","controlId","ControlLabel","FormControl","name","accepter","componentClass","rows","placeholder","src","alt","Arrow","active","BreadcrumbComponent","style","split","activeIndex","setActiveIndex","Breadcrumb","separator","slice","join","Item","renderItem","onMouseEnter","onMouseLeave","FilterItem","VIDEO","TEXT","FilterComponent","ALL_TYPES","ButtonGroup","Code","showCode","setShowCode","showRefresh","setShowRefresh","showSave","setShowSave","isFetching","setIsFetching","getItem","parse","refresh","finally","spin","as","IconButton","body","padding","borderRadius","marginBottom","border","theme","ButtonGroupComponent","v","undefined","ev","change","MdComponent","options","overrides","component","MdWithPreviewComponent","isPreview","setIsPreview","Hr","width","margin","pattern","isOneOf","Detail","KEYS","useMemo","close","Drawer","AutoComplete","RadioGroup","display","paddingRight","Radio","minHeight","err","Object","styles","height","FileUpload","file","setFile","Uploader","draggable","multiple","fileList","autoUpload","fileListVisible","files","blobFile","text","Alert","accept","RemoveModal","onConfirm","IconComponent","Whisper","preventOverflow","placement","trigger","speaker","top","left","Popover","video","link","allow","allowFullScreen","ItemsList","setIndex","keysString","filtered","startsWith","includes","keyExists","isRemove","List","hover","FlexboxGrid","colspan","Tooltip","marginLeft","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02befa9a.chunk.js","sourcesContent":["import { Octokit } from '@octokit/core';\n\nimport { TIPS_URL } from './store/constants.store';\nimport { TItem } from './store/interfaces.store';\nimport { getRepoInfo } from './utils/utils';\n\nexport const fetchItems = (): Promise<TItem[]> =>\n  fetch(TIPS_URL).then((res) => res.json() as Promise<TItem[]>);\n\nexport const update = async (\n  items: TItem[],\n  message: string,\n  auth: string,\n): Promise<boolean> => {\n  const octokit = new Octokit({ auth });\n  const repo_info = getRepoInfo();\n\n  if (!repo_info) {\n    throw new Error('Repository not specified');\n  }\n\n  const { branch, owner, path, repo } = repo_info;\n  const { data } = await octokit.request(\n    'GET /repos/{owner}/{repo}/contents/{path}',\n    {\n      repo,\n      owner,\n      path,\n    },\n  );\n\n  const content = Buffer.from(\n    JSON.stringify(items, null, 2),\n  ).toString('base64');\n\n  await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {\n    sha: (data as any).sha,\n    repo,\n    path,\n    owner,\n    branch,\n    message,\n    content,\n  });\n\n  return true;\n};\n","import { IAppState } from './interfaces.store';\n\nexport const TIPS_STORAGE_KEY = '__TIPS__';\nexport const TIPS_URL =\n  'https://raw.githubusercontent.com/4d/Web-studio-TIPS/main/tips.json';\n\nexport const initialState: IAppState = {\n  filter: {\n    key: '',\n    type: '*',\n  },\n  items: [],\n  current: -1,\n  keys: [],\n};\n","import { set, memoize } from 'lodash';\nimport { TIPS_URL } from '~/store/constants.store';\n\nexport type ObjectType = {\n  [key: string]: any;\n};\n\nexport const flattenObj = (object: ObjectType): ObjectType => {\n  // The object which contains the\n  // final result\n  const result: ObjectType = {};\n\n  // loop through the object \"ob\"\n  for (const i in object) {\n    // We check the type of the i using\n    // typeof() function and recursively\n    // call the function again\n    if (typeof object[i] === 'object' && !Array.isArray(object[i])) {\n      const temp = flattenObj(object[i]);\n      for (const j in temp) {\n        // Store temp in result\n        result[i + '.' + j] = temp[j];\n      }\n    }\n\n    // Else store ob[i] in result directly\n    else {\n      result[i] = object[i];\n    }\n  }\n  return result;\n};\n\nexport const unflattenObj = (object: ObjectType): ObjectType => {\n  const result: ObjectType = {};\n\n  for (const attr in object) {\n    set(result, attr, object[attr]);\n  }\n\n  return result;\n};\n\ninterface IRepoInfo {\n  owner: string;\n  repo: string;\n  branch: string;\n  path: string;\n}\n\nexport const getRepoInfo = memoize((): IRepoInfo | undefined => {\n  const REGEX =\n    /^https:\\/\\/raw\\.githubusercontent\\.com\\/(?<owner>[^/]*)\\/(?<repo>[^/]*)\\/(?<branch>[^/]*)\\/(?<path>.*)/;\n  const match = REGEX.exec(TIPS_URL);\n\n  if (!match) {\n    return undefined;\n  }\n\n  return match.groups as unknown as IRepoInfo;\n});\n\nexport const getRepoLink = memoize((): string => {\n  const infos = getRepoInfo();\n\n  if (!infos) {\n    return '#';\n  }\n\n  const { owner, repo, branch } = infos;\n\n  return `https://github.com/${owner}/${repo}/tree/${branch}`;\n});\n\nexport const getFilePath = memoize((): string => {\n  const infos = getRepoInfo();\n\n  if (!infos) {\n    return '#';\n  }\n\n  const { owner, repo, branch, path } = infos;\n\n  return `https://github.com/${owner}/${repo}/tree/${branch}/${path}`;\n});\n","export enum EItemType {\n  TEXT = 'text',\n  VIDEO = 'video',\n}\n\nexport interface IItem {\n  key: string;\n  body: string;\n  type: EItemType;\n}\n\nexport interface IVideoItem extends IItem {\n  type: EItemType.VIDEO;\n  video: {\n    provider: string;\n    link: string;\n  };\n  title: string;\n}\n\nexport interface ITextItem extends IItem {\n  type: EItemType.TEXT;\n}\n\nexport type TItem = IVideoItem | ITextItem;\n\nexport interface IKeyItem {\n  label: string;\n  group: string;\n  value: string;\n}\n\nexport type TFilterType = '*' | '!' | '?' | EItemType;\n\nexport interface IAppState {\n  items: TItem[];\n  current: number;\n  filter: {\n    key: string;\n    type: TFilterType;\n  };\n  keys: IKeyItem[];\n}\n\nexport enum EActionType {\n  SET_CURRENT_ITEM = 'Edit item',\n  REMOVE_ITEM = 'Remove item',\n  SAVE_ITEM = 'SAVE item',\n  SET_KEYS = 'Set Keys',\n  SET_ITEMS = 'Set Items',\n  FILTER_BY_KEY = 'Filter by key',\n  FILTER_BY_TYPE = 'Filter by type',\n}\n\nexport interface TSetCurrentItemAction {\n  type: EActionType.SET_CURRENT_ITEM;\n  payload: number;\n}\n\nexport interface TSetKeysAction {\n  type: EActionType.SET_KEYS;\n  payload: IKeyItem[];\n}\n\nexport interface TRemoveItemAction {\n  type: EActionType.REMOVE_ITEM;\n  payload: number;\n}\n\nexport interface TSaveItemAction {\n  type: EActionType.SAVE_ITEM;\n  payload: {\n    item: TItem;\n    index: number;\n  };\n}\n\nexport interface TSetItemsAction {\n  type: EActionType.SET_ITEMS;\n  payload: TItem[];\n}\n\nexport interface TFilterByKeyAction {\n  type: EActionType.FILTER_BY_KEY;\n  payload: string;\n}\n\nexport interface TFilterByTypeAction {\n  type: EActionType.FILTER_BY_TYPE;\n  payload: TFilterType;\n}\n\nexport type TAction =\n  | TSetCurrentItemAction\n  | TSetKeysAction\n  | TRemoveItemAction\n  | TSaveItemAction\n  | TFilterByKeyAction\n  | TFilterByTypeAction\n  | TSetItemsAction;\n","import {\n  EActionType,\n  IKeyItem,\n  TFilterType,\n  TItem,\n  TRemoveItemAction,\n  TSaveItemAction,\n  TSetCurrentItemAction,\n  TFilterByKeyAction,\n  TSetItemsAction,\n  TSetKeysAction,\n  TFilterByTypeAction,\n} from './interfaces.store';\n\nexport function setItems(payload: TItem[]): TSetItemsAction {\n  return {\n    type: EActionType.SET_ITEMS,\n    payload,\n  };\n}\n\nexport function removeItem(index: number): TRemoveItemAction {\n  return {\n    type: EActionType.REMOVE_ITEM,\n    payload: index,\n  };\n}\n\nexport function saveItem(\n  item: TItem,\n  index: number,\n): TSaveItemAction {\n  return {\n    type: EActionType.SAVE_ITEM,\n    payload: { item, index },\n  };\n}\n\nexport function setKeys(keys: IKeyItem[]): TSetKeysAction {\n  return {\n    type: EActionType.SET_KEYS,\n    payload: keys,\n  };\n}\n\nexport function setCurrentItem(\n  payload: number,\n): TSetCurrentItemAction {\n  return {\n    type: EActionType.SET_CURRENT_ITEM,\n    payload,\n  };\n}\n\nexport function filterByKey(payload: string): TFilterByKeyAction {\n  return {\n    type: EActionType.FILTER_BY_KEY,\n    payload,\n  };\n}\n\nexport function filterByType(\n  payload: TFilterType,\n): TFilterByTypeAction {\n  return {\n    type: EActionType.FILTER_BY_TYPE,\n    payload,\n  };\n}\n","import { remove } from 'lodash';\nimport { Reducer } from 'react';\nimport { sortBy } from 'lodash';\nimport { initialState } from './constants.store';\nimport { EActionType, IAppState, TAction } from './interfaces.store';\n\nexport const appReducer: Reducer<IAppState, TAction> = (\n  state: IAppState = initialState,\n  action: TAction,\n): IAppState => {\n  switch (action.type) {\n    case EActionType.SET_KEYS:\n      return {\n        ...state,\n        keys: action.payload,\n      };\n    case EActionType.FILTER_BY_KEY:\n      return {\n        ...state,\n        filter: {\n          ...state.filter,\n          key: action.payload,\n        },\n      };\n    case EActionType.FILTER_BY_TYPE:\n      return {\n        ...state,\n        filter: {\n          ...state.filter,\n          type: action.payload,\n        },\n      };\n    case EActionType.SET_ITEMS:\n      return {\n        ...state,\n        items: sortBy(action.payload, ['key']),\n      };\n    case EActionType.REMOVE_ITEM:\n      return {\n        ...state,\n        items: remove(\n          state.items,\n          (item, index) => index !== action.payload,\n        ),\n      };\n    case EActionType.SAVE_ITEM: {\n      const { index, item } = action.payload;\n\n      if (index >= state.items.length) {\n        return {\n          ...state,\n          current: -1,\n          items: [...state.items, item],\n        };\n      }\n\n      return {\n        ...state,\n        current: -1,\n        items: state.items.map((current, i) =>\n          index === i ? item : current,\n        ),\n      };\n    }\n    case EActionType.SET_CURRENT_ITEM:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  createContext,\n  useContext,\n  useReducer,\n  FC,\n  Dispatch,\n  useEffect,\n} from 'react';\nimport { setKeys } from './actions.store';\nimport { initialState, TIPS_STORAGE_KEY } from './constants.store';\nimport { IAppState, IKeyItem, TAction } from './interfaces.store';\nimport { appReducer } from './reducer.store';\n\nconst Store = createContext<[IAppState, Dispatch<TAction>]>([\n  initialState,\n  () => {},\n]);\n\nStore.displayName = 'Store';\n\nexport const useStore = () => useContext(Store);\n\nexport const StoreProvider: FC = ({ children }) => {\n  const [globalState, dispatch] = useReducer(\n    appReducer,\n    initialState,\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\n      TIPS_STORAGE_KEY,\n      JSON.stringify(globalState.items),\n    );\n  }, [globalState.items]);\n\n  useEffect(() => {\n    fetch('keys.json')\n      .then((res) => res.json() as Promise<IKeyItem[]>)\n      .then((keys) => dispatch(setKeys(keys)));\n  }, []);\n\n  return (\n    <Store.Provider value={[globalState, dispatch]}>\n      {children}\n    </Store.Provider>\n  );\n};\n","import { FC } from 'react';\nimport { Button, ButtonProps, Modal } from 'rsuite';\n\nexport type ConfirmDialogProps = Partial<{\n  show: boolean;\n  title: string;\n  yesLabel: string;\n  noLabel: string;\n  yesProps: ButtonProps;\n  noProps: ButtonProps;\n  onYes: (isYes: boolean) => void;\n}>;\n\nconst ConfirmDialog: FC<ConfirmDialogProps> = ({\n  show,\n  onYes,\n  title = 'Confirm',\n  children,\n  yesLabel = 'Yes',\n  noLabel = 'No',\n  yesProps = {},\n  noProps = {},\n}) => {\n  function onHide(isYes: boolean) {\n    if (onYes) {\n      onYes(isYes);\n    }\n  }\n\n  return (\n    <Modal show={show} onHide={() => onHide(false)}>\n      <Modal.Header>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{children}</Modal.Body>\n      <Modal.Footer>\n        <Button\n          appearance=\"primary\"\n          {...yesProps}\n          onClick={() => onHide(true)}\n        >\n          {yesLabel}\n        </Button>\n        <Button\n          appearance=\"subtle\"\n          {...noProps}\n          onClick={() => onHide(false)}\n        >\n          {noLabel}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ConfirmDialog;\n","import { FC, useState } from 'react';\nimport { Icon, Input, InputGroup, InputProps } from 'rsuite';\n\nconst PasswordComponent: FC<Omit<InputProps, 'type'>> = (props) => {\n  const [visible, setVisible] = useState(false);\n\n  const handleChange = () => {\n    setVisible(!visible);\n  };\n  return (\n    <InputGroup inside>\n      <Input {...props} type={visible ? 'text' : 'password'} />\n      <InputGroup.Button onClick={handleChange}>\n        <Icon icon={visible ? 'eye' : 'eye-slash'} />\n      </InputGroup.Button>\n    </InputGroup>\n  );\n};\n\nexport default PasswordComponent;\n","import { FC, useEffect, useRef, useState } from 'react';\nimport {\n  ControlLabel,\n  Form,\n  FormControl,\n  FormGroup,\n  Input,\n  Schema,\n} from 'rsuite';\nimport { FormInstance } from 'rsuite/lib/Form';\nimport HelpBlock from 'rsuite/lib/HelpBlock';\nimport { update } from '~/api.service';\nimport { useStore } from '~/store/provider.store';\nimport { getFilePath } from '~/utils/utils';\nimport PasswordComponent from '../dumb/password.dumb';\nimport ConfirmDialog, { ConfirmDialogProps } from './confirm.dialog';\n\nconst { StringType } = Schema.Types;\n\nconst model = Schema.Model({\n  token: StringType().isRequired('The access key is required'),\n  message: StringType().isRequired('The message is required'),\n});\n\ninterface IValue {\n  message: string;\n  token: string;\n}\n\nconst SaveComponent: FC<ConfirmDialogProps> = ({\n  show = false,\n  onYes = () => {},\n}) => {\n  const formRef = useRef<FormInstance>();\n  const [error, setError] = useState({});\n  const [value, setValue] = useState<IValue>({\n    message: '',\n    token: '',\n  });\n  const [{ items }] = useStore();\n\n  useEffect(() => {\n    setValue({\n      ...value,\n      message: '',\n    });\n\n    setError({});\n  }, [show]);\n\n  const save = () => {\n    if (!formRef.current?.check()) {\n      return;\n    }\n\n    update(items, value?.message, value?.token)\n      .then(() => onYes(true))\n      .catch((e) => {\n        setError({\n          token: `Error while updating the file: ${e.message}`,\n        });\n        console.error(e);\n      });\n  };\n\n  return (\n    <ConfirmDialog\n      show={show}\n      yesProps={{ color: 'green' }}\n      onYes={(isYes) => {\n        if (isYes) {\n          return save();\n        }\n\n        onYes(isYes);\n      }}\n    >\n      Saving content to:\n      <div className=\"flex justify-center my-5\">\n        <a\n          target=\"_blank\"\n          href={getFilePath()}\n          className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\"\n          rel=\"noreferrer\"\n        >\n          {getFilePath()}\n        </a>\n      </div>\n      <Form\n        ref={(ref: any) => (formRef.current = ref)}\n        model={model}\n        autoComplete=\"off\"\n        formValue={value}\n        formError={error}\n        onChange={(value) => setValue(value as IValue)}\n        onCheck={setError}\n      >\n        <FormGroup controlId=\"token\">\n          <ControlLabel>Access Key</ControlLabel>\n          <FormControl\n            name=\"token\"\n            type=\"password\"\n            autoComplete=\"off\"\n            accepter={PasswordComponent}\n          />\n        </FormGroup>\n        <FormGroup controlId=\"message\">\n          <ControlLabel>Message</ControlLabel>\n          <FormControl\n            name=\"message\"\n            accepter={Input}\n            componentClass=\"textarea\"\n            rows={5}\n            placeholder=\"Put your commit message here\"\n          />\n          <HelpBlock>\n            The Token can be generated{' '}\n            <a\n              href=\"https://github.com/settings/tokens/new\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"underline\"\n            >\n              from here\n            </a>\n            . Make sure that the{' '}\n            <span className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\">\n              public_repo\n            </span>{' '}\n            scope is checked.\n            <img\n              className=\"my-4\"\n              src=\"github_token.png\"\n              alt=\"Github Token\"\n            />\n          </HelpBlock>\n        </FormGroup>\n      </Form>\n    </ConfirmDialog>\n  );\n};\n\nexport default SaveComponent;\n","import { CSSProperties, FC, useState } from 'react';\nimport { Breadcrumb } from 'rsuite';\nimport './breadcrumb.style.css';\n\ninterface ArrowProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  active: boolean;\n}\n\nconst Arrow: FC<ArrowProps> = ({ children, active, ...props }) => {\n  return (\n    <div className={`rs-item ${active ? 'active' : ''}`} {...props}>\n      {children}\n    </div>\n  );\n};\n\ninterface BreadcrumbComponentProps {\n  path: string;\n  style?: CSSProperties;\n  className?: string;\n  onClick?: (ev: { value: string; index: number }) => void;\n}\n\nconst BreadcrumbComponent: FC<BreadcrumbComponentProps> = ({\n  path = '',\n  onClick,\n  className = '',\n  style = {},\n}) => {\n  const items = path.split(':');\n  const [activeIndex, setActiveIndex] = useState<number>(-1);\n\n  return (\n    <Breadcrumb\n      separator=\"\"\n      style={style}\n      className={`${className} font-medium whitespace-nowrap`}\n    >\n      {items.map((item, index) => {\n        const current = items.slice(0, index + 1).join(':');\n        return (\n          <Breadcrumb.Item\n            key={current}\n            renderItem={() => (\n              <Arrow\n                onMouseEnter={() => setActiveIndex(index)}\n                onMouseLeave={() => setActiveIndex(-1)}\n                active={activeIndex >= index}\n                onClick={() => {\n                  if (onClick) {\n                    onClick({\n                      value: current,\n                      index,\n                    });\n                  }\n                }}\n              >\n                {item}\n              </Arrow>\n            )}\n          />\n        );\n      })}\n    </Breadcrumb>\n  );\n};\n\nexport default BreadcrumbComponent;\n","import { FC, useEffect, useState } from 'react';\nimport ReactJson from 'react-json-view';\nimport { Button, ButtonGroup, Icon, IconButton } from 'rsuite';\nimport { fetchItems } from '~/api.service';\nimport {\n  filterByKey,\n  filterByType,\n  saveItem,\n  setCurrentItem,\n  setItems,\n} from '~/store/actions.store';\nimport { TIPS_STORAGE_KEY, TIPS_URL } from '~/store/constants.store';\nimport {\n  EItemType,\n  TFilterType,\n  TItem,\n} from '~/store/interfaces.store';\nimport { useStore } from '~/store/provider.store';\nimport { getRepoLink } from '~/utils/utils';\nimport ConfirmDialog from './dialogs/confirm.dialog';\nimport SaveComponent from './dialogs/save.dialog';\nimport BreadcrumbComponent from './dumb/breadcrumb.dumb';\n\nconst FilterItem: FC<{ type: TFilterType }> = ({ type }) => {\n  switch (type) {\n    case '*':\n      return <span>All</span>;\n    case '!':\n      return <Icon icon=\"info\" />;\n    case EItemType.VIDEO:\n      return <Icon icon=\"film\" />;\n    case EItemType.TEXT:\n      return <Icon icon=\"code\" />;\n  }\n  return <Icon icon=\"question-circle2\" />;\n};\n\nconst FilterComponent: FC = () => {\n  const [{ filter }, dispatch] = useStore();\n\n  const ALL_TYPES: TFilterType[] = [\n    '*',\n    EItemType.TEXT,\n    EItemType.VIDEO,\n    '!',\n    '?',\n  ];\n\n  return (\n    <ButtonGroup className=\"mx-4\">\n      {ALL_TYPES.map((type) => (\n        <Button\n          appearance={filter.type === type ? 'primary' : 'default'}\n          onClick={() => dispatch(filterByType(type))}\n        >\n          <FilterItem type={type} />\n        </Button>\n      ))}\n    </ButtonGroup>\n  );\n};\n\nconst Code: FC = () => {\n  const [{ items, filter }, dispatch] = useStore();\n  const [showCode, setShowCode] = useState<boolean>(false);\n  const [showRefresh, setShowRefresh] = useState<boolean>(false);\n  const [showSave, setShowSave] = useState<boolean>(false);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  useEffect(() => {\n    const cache = localStorage.getItem(TIPS_STORAGE_KEY);\n    let items: TItem[] = [];\n\n    if (cache) {\n      try {\n        items = JSON.parse(\n          localStorage.getItem(TIPS_STORAGE_KEY) || '[]',\n        ) as TItem[];\n      } catch (e) {\n        items = [];\n      }\n\n      dispatch(setItems(items));\n      return;\n    }\n\n    refresh();\n  }, []);\n\n  const refresh = () => {\n    setIsFetching(true);\n    fetchItems()\n      .then((json) => dispatch(setItems(json)))\n      .finally(() => setIsFetching(false));\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        show={showRefresh}\n        yesProps={{ color: 'red' }}\n        onYes={(isYes) => {\n          if (isYes) {\n            refresh();\n          }\n\n          setShowRefresh(false);\n        }}\n      >\n        Reloading the view will fetch the items from:\n        <div className=\"flex justify-center my-5\">\n          <a\n            target=\"_blank\"\n            href={TIPS_URL}\n            className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\"\n            rel=\"noreferrer\"\n          >\n            {TIPS_URL}\n          </a>\n        </div>\n        <span className=\"text-red-400 underline\">\n          All your changes will be lost. Are you sure you want to\n          proceed?\n        </span>\n      </ConfirmDialog>\n      <SaveComponent\n        show={showSave}\n        onYes={() => setShowSave(false)}\n      />\n      <div className=\"w-full flex justify-between flex-row my-3\">\n        <div className=\"flex justify-center align-middle\">\n          <Button\n            className=\"mr-4\"\n            onClick={() => setShowRefresh(true)}\n          >\n            <Icon icon=\"refresh\" spin={isFetching}></Icon>\n          </Button>\n          <Button className=\"mr-4\" onClick={() => setShowSave(true)}>\n            <Icon icon=\"save\"></Icon>\n          </Button>\n          <Button as=\"a\" target=\"_blank\" href={getRepoLink()}>\n            <Icon icon=\"github\"></Icon>\n          </Button>\n          <FilterComponent />\n          <IconButton\n            className=\"mr-4\"\n            icon={<Icon icon=\"plus\" />}\n            onClick={() => {\n              dispatch(\n                saveItem(\n                  {\n                    body: '',\n                    key: '',\n                    type: EItemType.TEXT,\n                  },\n                  items.length,\n                ),\n              );\n\n              dispatch(setCurrentItem(items.length));\n            }}\n          />\n          {filter.key ? (\n            <>\n              <BreadcrumbComponent\n                path={filter.key}\n                onClick={({ value }) => dispatch(filterByKey(value))}\n              />\n              <Button\n                appearance=\"link\"\n                onClick={() => dispatch(filterByKey(''))}\n              >\n                Clear\n              </Button>\n            </>\n          ) : null}\n        </div>\n        <div className=\"block\">\n          <IconButton\n            appearance={showCode ? 'primary' : 'default'}\n            onClick={() => setShowCode(!showCode)}\n            icon={<Icon icon=\"code\" />}\n          />\n        </div>\n      </div>\n      {showCode ? (\n        <ReactJson\n          style={{\n            padding: 10,\n            borderRadius: 6,\n            marginBottom: 12,\n            border: '1px dashed gray',\n          }}\n          src={items}\n          theme=\"solarized\"\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default Code;\n","import { FC, SyntheticEvent } from 'react';\nimport { IconNames } from 'rsuite/lib/Icon';\nimport {\n  IconButton,\n  Icon,\n  IconButtonProps,\n  ButtonGroup,\n} from 'rsuite';\n\nexport interface IButtonGroupProps extends IconButtonProps {\n  onChange?: (value: string, event: SyntheticEvent) => void;\n  value?: string;\n  data?: {\n    value: string;\n    icon: IconNames;\n  }[];\n}\n\nconst ButtonGroupComponent: FC<IButtonGroupProps> = ({\n  onChange,\n  value = '',\n  data = [],\n  ...props\n}) => {\n  const change = (v: string, ev: SyntheticEvent) => {\n    if (onChange) {\n      onChange(v, ev);\n    }\n  };\n\n  return (\n    <ButtonGroup>\n      {data.map(({ icon, value: v }) => (\n        <IconButton\n          {...props}\n          icon={icon ? <Icon icon={icon} /> : undefined}\n          onClick={(ev) => change(v, ev)}\n          appearance={v === value ? 'primary' : 'default'}\n        />\n      ))}\n    </ButtonGroup>\n  );\n};\n\nexport default ButtonGroupComponent;\n","import Markdown from 'markdown-to-jsx';\nimport { FC } from 'react';\nimport { Icon } from 'rsuite';\n\nexport interface IMdProps {\n  value?: string;\n}\n\nconst MdComponent: FC<IMdProps> = ({ value = '' }) => {\n  return (\n    <Markdown\n      options={{\n        overrides: {\n          a: {\n            component: ({ children, ...props }) => {\n              return (\n                <a\n                  {...props}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {children}\n                  <Icon icon=\"external-link\" className=\"ml-1\" />\n                </a>\n              );\n            },\n          },\n        },\n      }}\n    >\n      {value}\n    </Markdown>\n  );\n};\n\nexport default MdComponent;\n","import { FC, SyntheticEvent, useState } from 'react';\nimport { Input, InputProps } from 'rsuite';\nimport ButtonGroupComponent from './button-group.dumb';\nimport MdComponent from './md.dumb';\n\nexport interface IMdWithPreviewProps extends InputProps {\n  onChange?: (value: string, event: SyntheticEvent) => void;\n  value?: string;\n}\n\nconst MdWithPreviewComponent: FC<IMdWithPreviewProps> = ({\n  value = '',\n  className,\n  ...props\n}) => {\n  const [isPreview, setIsPreview] = useState(false);\n\n  return (\n    <div className={className}>\n      <ButtonGroupComponent\n        style={{ marginBottom: 10 }}\n        data={[\n          {\n            icon: 'code',\n            value: 'code',\n          },\n          {\n            icon: 'eye',\n            value: 'preview',\n          },\n        ]}\n        value={isPreview ? 'preview' : 'code'}\n        onChange={(v) => setIsPreview(v === 'preview')}\n      />\n      {isPreview ? (\n        <MdComponent value={value} />\n      ) : (\n        <Input\n          {...props}\n          value={value}\n          componentClass=\"textarea\"\n          placeholder=\"Textarea\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MdWithPreviewComponent;\n","import { FC, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  AutoComplete,\n  Button,\n  ControlLabel,\n  Drawer,\n  Form,\n  FormControl,\n  FormGroup,\n  Icon,\n  Input,\n  Radio,\n  RadioGroup,\n  Schema,\n} from 'rsuite';\nimport { FormInstance } from 'rsuite/lib/Form';\nimport {\n  removeItem,\n  saveItem,\n  setCurrentItem,\n} from '~/store/actions.store';\nimport { EItemType, TItem } from '~/store/interfaces.store';\nimport { useStore } from '~/store/provider.store';\nimport { flattenObj, ObjectType, unflattenObj } from '~/utils/utils';\nimport BreadcrumbComponent from './dumb/breadcrumb.dumb';\nimport MdWithPreviewComponent from './dumb/md-preview.dumb';\n\nconst { StringType } = Schema.Types;\n\nconst Hr: FC = () => (\n  <hr style={{ width: '80%', margin: '15px auto' }} />\n);\n\nconst model = Schema.Model({\n  key: StringType()\n    .isRequired('The key is required')\n    .pattern(/^[0-9a-z]+(?::[0-9a-z]+)*$/),\n  type: StringType()\n    .isOneOf(\n      [EItemType.VIDEO, EItemType.TEXT],\n      'The specified type is unsupported',\n    )\n    .isRequired('The type is required'),\n  body: StringType().isRequired('The content is required'),\n  'video.link': StringType(),\n});\n\nconst Detail: FC = () => {\n  const [{ current, items, keys }, dispatch] = useStore();\n  const [error, setError] = useState({});\n  const [value, setValue] = useState<ObjectType>();\n  const formRef = useRef<FormInstance>();\n\n  const KEYS = useMemo(\n    () => keys.map(({ value }) => value),\n    [keys.length],\n  );\n\n  useEffect(() => {\n    const item = items[current];\n\n    if (!item) {\n      return;\n    }\n\n    setValue(flattenObj(item));\n    setError({});\n  }, [items, current]);\n\n  if (current < 0 || !items[current]) {\n    return null;\n  }\n\n  const close = () => {\n    if (!value?.key) {\n      dispatch(removeItem(current));\n    }\n\n    dispatch(setCurrentItem(-1));\n  };\n\n  return (\n    <Drawer show={current >= 0} onHide={close}>\n      <Drawer.Header>\n        {value?.key ? (\n          <Drawer.Title>\n            <BreadcrumbComponent path={value.key} />\n          </Drawer.Title>\n        ) : null}\n      </Drawer.Header>\n      <Drawer.Body>\n        <Form\n          ref={(ref: any) => (formRef.current = ref)}\n          model={model}\n          autoComplete=\"off\"\n          formValue={value}\n          formError={error}\n          onChange={(value) => setValue(value as TItem)}\n          onCheck={setError}\n        >\n          <FormGroup>\n            <ControlLabel>Key</ControlLabel>\n            <FormControl\n              name=\"key\"\n              accepter={AutoComplete}\n              data={KEYS}\n            />\n          </FormGroup>\n          <FormGroup>\n            <ControlLabel>Type</ControlLabel>\n            <FormControl\n              name=\"type\"\n              accepter={RadioGroup}\n              appearance=\"picker\"\n              style={{\n                display: 'flex',\n                width: 'fit-content',\n                paddingRight: 10,\n              }}\n            >\n              <Radio value={EItemType.TEXT}>\n                <Icon icon=\"code\" className=\"mr-4\" />\n                Text\n              </Radio>\n              <Radio value={EItemType.VIDEO}>\n                <Icon icon=\"code\" className=\"mr-4\" />\n                Video\n              </Radio>\n            </FormControl>\n          </FormGroup>\n          {value?.type === EItemType.VIDEO ? (\n            <>\n              <Hr />\n              <FormGroup>\n                <ControlLabel>Url</ControlLabel>\n                <FormControl\n                  name=\"video.link\"\n                  accepter={Input}\n                  style={{ width: '100%' }}\n                />\n              </FormGroup>\n            </>\n          ) : null}\n          <FormGroup>\n            <FormControl\n              name=\"body\"\n              accepter={MdWithPreviewComponent}\n              rows={10}\n              style={{ width: '100%', minHeight: 280 }}\n              className=\"w-full min-h-[326px]\"\n            />\n          </FormGroup>\n        </Form>\n      </Drawer.Body>\n      <Drawer.Footer>\n        <Button\n          onClick={() =>\n            formRef.current?.check((err) => {\n              if (Object.keys(err || {}).length) {\n                return;\n              }\n\n              const item = unflattenObj(value!) as TItem;\n              dispatch(saveItem(item, current));\n            })\n          }\n          appearance=\"primary\"\n        >\n          Confirm\n        </Button>\n        <Button appearance=\"subtle\" onClick={close}>\n          Cancel\n        </Button>\n      </Drawer.Footer>\n    </Drawer>\n  );\n};\n\nexport default Detail;\n","import { FC, useState } from 'react';\nimport { Alert, Uploader } from 'rsuite';\nimport { FileType } from 'rsuite/lib/Uploader';\nimport { setItems } from '~/store/actions.store';\nimport { useStore } from '~/store/provider.store';\n\nconst styles = {\n  width: '100%',\n  height: '100%',\n};\n\nconst FileUpload: FC = () => {\n  const [file, setFile] = useState<FileType | null>(null);\n  const [, dispatch] = useStore();\n\n  return (\n    <Uploader\n      className=\"w-full mb-3\"\n      draggable\n      multiple={false}\n      fileList={file ? [file] : []}\n      autoUpload={false}\n      fileListVisible={false}\n      onChange={async (files) => {\n        if (files.length === 0) {\n          return;\n        }\n\n        const result = (await files[0].blobFile?.text()) || '[]';\n\n        try {\n          const json = JSON.parse(result);\n          dispatch(setItems(json));\n        } catch (e) {\n          Alert.error('Invalid JSON.');\n          return;\n        }\n\n        setFile(null);\n      }}\n      accept=\"application/json\"\n    >\n      <div style={styles}>Click or Drag files to this area</div>\n    </Uploader>\n  );\n};\n\nexport default FileUpload;\n","import { FC } from 'react';\nimport { IItem } from '~/store/interfaces.store';\nimport ConfirmDialog from './confirm.dialog';\n\nconst RemoveModal: FC<{\n  item?: IItem;\n  show: boolean;\n  onConfirm?: (isRemove: boolean) => void;\n}> = ({ show, onConfirm, item }) => {\n  if (!item) {\n    return null;\n  }\n\n  return (\n    <ConfirmDialog\n      show={show}\n      onYes={onConfirm}\n      yesLabel=\"Remove\"\n      noLabel=\"Cancel\"\n      yesProps={{ appearance: 'primary', color: 'red' }}\n    >\n      Are you sure you want to remove the key:\n      <span className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\">\n        {item.key}\n      </span>{' '}\n      of type:\n      <span className=\"bg-gray-500 text-xs p-1 rounded-md mx-1\">\n        {item.type}\n      </span>\n      ?\n    </ConfirmDialog>\n  );\n};\n\nexport default RemoveModal;\n","import { FC, useMemo, useState } from 'react';\nimport {\n  Button,\n  FlexboxGrid,\n  Icon,\n  List,\n  Popover,\n  Tooltip,\n  Whisper,\n} from 'rsuite';\nimport { IconNames } from 'rsuite/lib/Icon';\nimport {\n  filterByKey,\n  removeItem,\n  setCurrentItem,\n} from '~/store/actions.store';\nimport { EItemType, TItem } from '~/store/interfaces.store';\nimport { useStore } from '~/store/provider.store';\nimport RemoveModal from './dialogs/confirm-remove.dialog';\nimport BreadcrumbComponent from './dumb/breadcrumb.dumb';\nimport MdComponent from './dumb/md.dumb';\n\nconst IconComponent: FC<{ item: TItem }> = ({ item }) => {\n  return (\n    <Whisper\n      preventOverflow\n      placement=\"auto\"\n      trigger=\"click\"\n      speaker={({ top, left, ...props }) => {\n        return (\n          <Popover\n            title={(item as any).title || ''}\n            style={{ top, left }}\n            {...props}\n          >\n            <article className=\"prose text-left prose-sm overflow-auto p-1 max-h-80 text-sm\">\n              {item.type === EItemType.VIDEO && item.video.link ? (\n                <iframe\n                  height={200}\n                  width={'100%'}\n                  src={item.video.link}\n                  title={item.title}\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              ) : null}\n              <MdComponent value={item.body} />\n            </article>\n          </Popover>\n        );\n      }}\n    >\n      <Icon\n        icon={((): IconNames => {\n          switch (item.type) {\n            case EItemType.TEXT:\n              return 'code';\n            case EItemType.VIDEO:\n              return 'film';\n            default:\n              return 'question';\n          }\n        })()}\n        className=\"text-gray-300 text-base cursor-pointer\"\n      />\n    </Whisper>\n  );\n};\n\nconst ItemsList: FC = () => {\n  const [{ items, filter, keys }, dispatch] = useStore();\n  const [index, setIndex] = useState<number>(-1);\n\n  const keysString = useMemo<string[]>(() => {\n    return keys.map(({ value }) => value);\n  }, [keys]);\n\n  const filtered = items.filter((item) => {\n    if (!item.key.startsWith(filter.key)) {\n      return false;\n    }\n\n    if (\n      !['*', '!', '?'].includes(filter.type) &&\n      item.type !== filter.type\n    ) {\n      return false;\n    }\n\n    const keyExists = keysString.includes(item.key);\n\n    if (filter.type === '!' && keyExists) {\n      return false;\n    }\n\n    if (\n      filter.type === '?' &&\n      [EItemType.TEXT, EItemType.VIDEO].includes(item.type)\n    ) {\n      return false;\n    }\n\n    return true;\n  });\n\n  return (\n    <>\n      <RemoveModal\n        item={items[index]}\n        show={!!items[index]}\n        onConfirm={(isRemove) => {\n          if (isRemove) {\n            dispatch(removeItem(index));\n          }\n\n          setIndex(-1);\n        }}\n      ></RemoveModal>\n      {items.length === 0 ? (\n        <div className=\"text-center bg-[#292d33] border-dashed rounded-md border border-gray-200 p-3\">\n          The list is empty. Please upload a valid{' '}\n          <span className=\"bg-gray-500 p-1 text-xs rounded-md mx-1\">\n            JSON file\n          </span>{' '}\n          or use{' '}\n          <a href=\"tips.json\" target=\"_blank\">\n            this example\n          </a>\n        </div>\n      ) : null}\n      {items.length > 0 && filtered.length === 0 ? (\n        <div className=\"text-center bg-[#292d33] border-dashed rounded-md border border-gray-200 p-3\">\n          The list is empty. Please change your filter\n        </div>\n      ) : null}\n      <List hover>\n        {filtered.map((item, index) => {\n          const keyExists = keysString.includes(item.key);\n          return (\n            <List.Item key={`${item.key}:${index}`} index={index}>\n              <FlexboxGrid>\n                {/*icon*/}\n                <FlexboxGrid.Item\n                  colspan={2}\n                  className=\"flex justify-center items-center h-16\"\n                >\n                  <IconComponent item={item} />\n                </FlexboxGrid.Item>\n                {/*base info*/}\n                <FlexboxGrid.Item\n                  colspan={19}\n                  className=\"flex flex-row h-16\"\n                >\n                  {!keyExists && (\n                    <Whisper\n                      trigger=\"hover\"\n                      placement=\"left\"\n                      speaker={\n                        <Tooltip>\n                          <div className=\"p-2\">Key not supported</div>\n                        </Tooltip>\n                      }\n                    >\n                      <Icon\n                        icon=\"info\"\n                        className=\"flex items-center mr-2 text-red-400 cursor-pointer\"\n                      />\n                    </Whisper>\n                  )}\n                  <BreadcrumbComponent\n                    style={{\n                      marginLeft: keyExists ? 22 : 'unset',\n                    }}\n                    path={item.key}\n                    onClick={({ value }) =>\n                      dispatch(filterByKey(value))\n                    }\n                  />\n                </FlexboxGrid.Item>\n                <FlexboxGrid.Item\n                  colspan={2}\n                  className=\"flex justify-center items-center h-16\"\n                >\n                  <Button\n                    color=\"orange\"\n                    appearance=\"link\"\n                    onClick={() => setIndex(index)}\n                  >\n                    Remove\n                  </Button>\n                  <span className=\"p-1\">|</span>\n                  <Button\n                    appearance=\"link\"\n                    onClick={() => dispatch(setCurrentItem(index))}\n                  >\n                    Edit\n                  </Button>\n                </FlexboxGrid.Item>\n              </FlexboxGrid>\n            </List.Item>\n          );\n        })}\n      </List>\n    </>\n  );\n};\n\nexport default ItemsList;\n","import { FC } from 'react';\nimport Code from '~/components/code.component';\nimport Detail from '~/components/detail.component';\nimport FileUpload from '~/components/file-upload.component';\nimport List from '~/components/list.component';\nimport { StoreProvider } from '~/store/provider.store';\n\nconst App: FC = () => {\n  return (\n    <StoreProvider>\n      <a\n        className=\"github-fork-ribbon\"\n        href=\"https://github.com/midrissi/tips-editor\"\n        data-ribbon=\"Fork me on GitHub\"\n        title=\"Fork me on GitHub\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Fork me on GitHub\n      </a>\n\n      <div className=\"max-w-7xl m-auto mt-4\">\n        <FileUpload></FileUpload>\n        <Code></Code>\n        <List></List>\n        <Detail></Detail>\n      </div>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}